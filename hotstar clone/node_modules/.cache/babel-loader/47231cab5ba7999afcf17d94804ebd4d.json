{"ast":null,"code":"import styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport React, { Children } from 'react';\nimport { Swipeable } from 'react-swipeable';\nimport cx from 'classnames';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport Only from 'react-only-when';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function () {};\n\n      return {\n        s: F,\n        n: function () {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function (e) {\n          throw e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function () {\n      it = o[Symbol.iterator]();\n    },\n    n: function () {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function (e) {\n      didErr = true;\n      err = e;\n    },\n    f: function () {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nvar noop = function noop() {};\n\nvar numberToArray = function numberToArray(n) {\n  return _toConsumableArray(Array(n).keys());\n};\n\nvar cssPrefix = function cssPrefix() {\n  var prefix = \"rec\";\n  var space = \" \";\n  var result = \"\".concat(prefix); // initial it with global prefix;\n  // in case of an array we add the class prefix per item;\n\n  for (var _len = arguments.length, classNames = new Array(_len), _key = 0; _key < _len; _key++) {\n    classNames[_key] = arguments[_key];\n  }\n\n  var chainedClasses = classNames.reduce(function (acc, current) {\n    if (current) {\n      acc += \"\".concat(space).concat(prefix, \"-\").concat(current); // we must keep spaces between class names\n    }\n\n    return acc;\n  }, \"\");\n  result += chainedClasses;\n  return result;\n};\n\nvar pipe = function pipe() {\n  for (var _len2 = arguments.length, fns = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    fns[_key2] = arguments[_key2];\n  }\n\n  return function (x) {\n    return fns.reduce(function (v, f) {\n      return f(v);\n    }, x);\n  };\n};\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  box-sizing: border-box;\\n  transition: all 0.3s ease;\\n  font-size: 1.6em;\\n  background-color: rgba(103, 58, 183, 0.1);\\n  color: \", \";\\n  box-shadow: 0 0 2px 0px #333;\\n  border-radius: 50%;\\n  border: none;\\n  padding: 0;\\n  width: 50px;\\n  height: 50px;\\n  min-width: 50px;\\n  line-height: 50px;\\n  align-self: center;\\n  cursor: pointer;\\n  outline: none;\\n  &:hover:enabled,\\n  &:focus:enabled {\\n    color: #fff;\\n    background-color: rgba(103, 58, 183, 1);\\n    box-shadow: 0 0 2px 0 #333;\\n  }\\n  &:disabled {\\n    cursor: not-allowed;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nvar Button = styled.button.attrs(function (_ref) {\n  var _ref$type = _ref.type,\n      type = _ref$type === void 0 ? \"button\" : _ref$type;\n  return {\n    type: type\n  };\n})(_templateObject(), function (props) {\n  return props.disabled ? \"#999\" : \"#333\";\n});\nvar consts = {\n  PREV: \"PREV\",\n  NEXT: \"NEXT\",\n  START: \"flex-start\",\n  CENTER: \"center\",\n  END: \"flex-end\"\n};\n\nfunction _templateObject$1() {\n  var data = _taggedTemplateLiteral([\"\\n  box-sizing: border-box;\\n  display: flex;\\n  overflow: hidden;\\n  user-select: none;\\n  justify-content: \", \";\\n\"]);\n\n  _templateObject$1 = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nvar ItemWrapper = styled.div.attrs(function (_ref) {\n  var style = _ref.style;\n  return {\n    style: style,\n    className: cssPrefix(\"item-wrapper\")\n  };\n})(_templateObject$1(), function (_ref2) {\n  var itemPosition = _ref2.itemPosition;\n  return itemPosition;\n});\nItemWrapper.defaultProps = {\n  style: {},\n  itemPosition: consts.CENTER\n};\nItemWrapper.propTypes = {\n  children: PropTypes.element.isRequired,\n  style: PropTypes.object,\n  itemPosition: PropTypes.oneOf([consts.START, consts.CENTER, consts.END])\n};\n\nfunction _templateObject$2() {\n  var data = _taggedTemplateLiteral([\"\\n  overflow: hidden;\\n  position: relative;\\n  width: 100%;\\n  margin: 0 10px;\\n\"]);\n\n  _templateObject$2 = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nvar SliderContainer = styled.div(_templateObject$2());\n\nfunction _templateObject$3() {\n  var data = _taggedTemplateLiteral([\"\\n  position: absolute;\\n  display: flex;\\n  flex-direction: \", \";\\n  \", \";\\n  \", \";\\n\"]);\n\n  _templateObject$3 = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nvar calcLeft = function calcLeft(_ref) {\n  var isRTL = _ref.isRTL,\n      verticalMode = _ref.verticalMode,\n      isSwiping = _ref.isSwiping,\n      swipedSliderPosition = _ref.swipedSliderPosition,\n      sliderPosition = _ref.sliderPosition;\n\n  if (verticalMode || isRTL) {\n    return \"auto\";\n  } else {\n    return \"\".concat(isSwiping ? swipedSliderPosition : sliderPosition, \"px\");\n  }\n};\n\nvar calcRight = function calcRight(_ref2) {\n  var isRTL = _ref2.isRTL,\n      verticalMode = _ref2.verticalMode,\n      isSwiping = _ref2.isSwiping,\n      swipedSliderPosition = _ref2.swipedSliderPosition,\n      sliderPosition = _ref2.sliderPosition;\n\n  if (!verticalMode && isRTL) {\n    return \"\".concat(isSwiping ? swipedSliderPosition : sliderPosition, \"px\");\n  } else {\n    return \"auto\";\n  }\n};\n\nvar calcTop = function calcTop(_ref3) {\n  var verticalMode = _ref3.verticalMode,\n      isSwiping = _ref3.isSwiping,\n      swipedSliderPosition = _ref3.swipedSliderPosition,\n      sliderPosition = _ref3.sliderPosition;\n\n  if (!verticalMode) {\n    return \"auto\";\n  } else {\n    return \"\".concat(isSwiping ? swipedSliderPosition : sliderPosition, \"px\");\n  }\n};\n\nvar calcTransition = function calcTransition(_ref4) {\n  var isSwiping = _ref4.isSwiping,\n      transitionMs = _ref4.transitionMs,\n      easing = _ref4.easing,\n      tiltEasing = _ref4.tiltEasing;\n  var duration = isSwiping ? 0 : transitionMs;\n  var effectiveEasing = isSwiping ? tiltEasing : easing;\n  return \"all \".concat(duration, \"ms \").concat(effectiveEasing);\n}; // We use attributes (style) to bypass multiple creation of classes (dynamic styling)\n\n\nvar Slider = styled.div.attrs(function (props) {\n  return {\n    style: {\n      transition: calcTransition(props),\n      left: calcLeft(props),\n      right: calcRight(props),\n      top: calcTop(props)\n    }\n  };\n})(_templateObject$3(), function (_ref5) {\n  var verticalMode = _ref5.verticalMode;\n  return verticalMode ? \"column\" : \"row\";\n}, function (_ref6) {\n  var verticalMode = _ref6.verticalMode;\n  return verticalMode ? \"min-height: 100%;\" : \"\";\n}, function (_ref7) {\n  var verticalMode = _ref7.verticalMode,\n      outerSpacing = _ref7.outerSpacing;\n  return verticalMode ? \"\" : \"margin: 0 \".concat(outerSpacing, \"px;\");\n});\n\nfunction _templateObject$4() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-direction: row;\\n  width: 100%;\\n\"]);\n\n  _templateObject$4 = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nvar StyledCarousel = styled.div.attrs(function (props) {\n  return {\n    style: {\n      height: props.size.height\n    }\n  };\n})(_templateObject$4());\n\nfunction _templateObject$5() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  width: 100%;\\n  direction: \", \";\\n\"]);\n\n  _templateObject$5 = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nvar CarouselWrapper = styled.div(_templateObject$5(), function (_ref) {\n  var isRTL = _ref.isRTL;\n  return isRTL ? \"rtl\" : \"ltr\";\n});\n\nvar ItemWrapperContainer = /*#__PURE__*/function (_React$Component) {\n  _inherits(ItemWrapperContainer, _React$Component);\n\n  var _super = _createSuper(ItemWrapperContainer);\n\n  function ItemWrapperContainer() {\n    var _this;\n\n    _classCallCheck(this, ItemWrapperContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"onClick\", function () {\n      var _this$props = _this.props,\n          onClick = _this$props.onClick,\n          id = _this$props.id;\n      onClick(id);\n    });\n\n    return _this;\n  }\n\n  _createClass(ItemWrapperContainer, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(ItemWrapper, _extends({}, this.props, {\n        onClick: this.onClick\n      }));\n    }\n  }]);\n\n  return ItemWrapperContainer;\n}(React.Component);\n\nItemWrapperContainer.defaultProps = {\n  onClick: noop\n};\nItemWrapperContainer.propTypes = {\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  onClick: PropTypes.func\n};\n\nvar Track = function Track(_ref) {\n  var children = _ref.children,\n      childWidth = _ref.childWidth,\n      autoTabIndexVisibleItems = _ref.autoTabIndexVisibleItems,\n      enableSwipe = _ref.enableSwipe,\n      enableMouseSwipe = _ref.enableMouseSwipe,\n      preventDefaultTouchmoveEvent = _ref.preventDefaultTouchmoveEvent,\n      itemsToShow = _ref.itemsToShow,\n      itemsToScroll = _ref.itemsToScroll,\n      currentItem = _ref.currentItem,\n      itemPosition = _ref.itemPosition,\n      itemPadding = _ref.itemPadding,\n      onSwiped = _ref.onSwiped,\n      onSwiping = _ref.onSwiping,\n      verticalMode = _ref.verticalMode,\n      onItemClick = _ref.onItemClick;\n  var width = \"\".concat(childWidth, \"px\");\n  var paddingStyle = \"\".concat(itemPadding.join(\"px \"), \"px\");\n  var minVisibleItem = currentItem;\n  var maxVisibleItem = currentItem + itemsToShow;\n  var prevItem = minVisibleItem - itemsToScroll;\n  var nextItem = maxVisibleItem + itemsToScroll;\n  var originalChildren = React.Children.map(children, function (child, idx) {\n    var isVisible = idx >= minVisibleItem && idx < maxVisibleItem;\n    var isPrevItem = !isVisible && idx >= prevItem && idx < currentItem;\n    var isNextItem = !isVisible && idx < nextItem && idx > currentItem;\n    var itemClass = \"carousel-item\";\n    var childToRender = autoTabIndexVisibleItems ? /*#__PURE__*/React.cloneElement(child, {\n      tabIndex: isVisible ? 0 : -1\n    }) : child;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: cssPrefix(itemClass, \"\".concat(itemClass, \"-\").concat(idx), \"\".concat(itemClass, \"-\").concat(isVisible ? \"visible\" : \"hidden\"), isPrevItem && \"\".concat(itemClass, \"-prev\"), isNextItem && \"\".concat(itemClass, \"-next\"))\n    }, /*#__PURE__*/React.createElement(ItemWrapperContainer, {\n      id: idx,\n      itemPosition: itemPosition,\n      style: {\n        width: width,\n        padding: paddingStyle\n      },\n      key: idx,\n      onClick: onItemClick\n    }, childToRender));\n  });\n  var toRender = enableSwipe ? /*#__PURE__*/React.createElement(Swipeable, {\n    style: {\n      display: \"flex\",\n      flexDirection: verticalMode ? \"column\" : \"row\"\n    },\n    stopPropagation: true,\n    preventDefaultTouchmoveEvent: preventDefaultTouchmoveEvent,\n    trackMouse: enableMouseSwipe,\n    onSwiped: onSwiped,\n    onSwiping: onSwiping,\n    className: cssPrefix(\"swipable\")\n  }, originalChildren) : originalChildren;\n  return toRender;\n};\n\nTrack.propTypes = {\n  children: PropTypes.array.isRequired,\n  itemsToShow: PropTypes.number.isRequired,\n  noAutoTabbedItems: PropTypes.bool,\n  currentItem: PropTypes.number.isRequired,\n  itemPosition: PropTypes.string,\n  itemPadding: PropTypes.array,\n  childWidth: PropTypes.number,\n  verticalMode: PropTypes.bool,\n  enableSwipe: PropTypes.bool,\n  enableMouseSwipe: PropTypes.bool,\n  preventDefaultTouchmoveEvent: PropTypes.bool,\n  onSwiped: PropTypes.func,\n  onSwiping: PropTypes.func,\n  onItemClick: PropTypes.func\n};\nvar directionIcons = {\n  left: \"❮\",\n  right: \"❯\",\n  up: \"❮\",\n  down: \"❯\"\n};\nvar arrowClassname = cssPrefix(\"arrow\");\n\nvar rotateStyle = function rotateStyle(direction) {\n  var rotate = {};\n\n  if (direction === Arrow.up || direction === Arrow.down) {\n    rotate.transform = \"rotate(90deg)\";\n  }\n\n  return rotate;\n};\n\nvar Arrow = function Arrow(_ref) {\n  var direction = _ref.direction,\n      onClick = _ref.onClick,\n      icons = _ref.icons,\n      style = _ref.style,\n      rest = _objectWithoutProperties(_ref, [\"direction\", \"onClick\", \"icons\", \"style\"]);\n\n  var arrows = _objectSpread2(_objectSpread2({}, directionIcons), icons);\n\n  var styleObj = _objectSpread2(_objectSpread2({}, rotateStyle(direction)), style);\n\n  return /*#__PURE__*/React.createElement(Button, _extends({\n    tabIndex: 0,\n    onClick: onClick,\n    className: cx(arrowClassname, \"\".concat(arrowClassname, \"-\").concat(direction)),\n    style: styleObj\n  }, rest), arrows[direction]);\n};\n\nArrow.left = \"left\";\nArrow.right = \"right\";\nArrow.up = \"up\";\nArrow.down = \"down\";\nArrow.propTypes = {\n  direction: PropTypes.oneOf([\"left\", \"right\", \"up\", \"down\"]).isRequired,\n  icons: PropTypes.object,\n  style: PropTypes.object,\n  onClick: PropTypes.func\n};\nvar NEXT_ITEM = \"NEXT_ITEM\";\nvar PREV_ITEM = \"PREV_ITEM\";\n\nvar activeIndexReducer = function activeIndexReducer(state, action) {\n  var limit = action.limit,\n      itemsToScroll = action.itemsToScroll,\n      type = action.type;\n\n  switch (type) {\n    case NEXT_ITEM:\n      {\n        var optimisticNextItem = state + itemsToScroll;\n        var nextItem = limit >= optimisticNextItem ? optimisticNextItem : limit;\n        return nextItem;\n      }\n\n    case PREV_ITEM:\n      {\n        var optimisticPrevItem = state - itemsToScroll;\n        var prevItem = optimisticPrevItem >= limit ? optimisticPrevItem : limit;\n        return prevItem;\n      }\n\n    default:\n      return state;\n  }\n};\n\nvar nextItemAction = function nextItemAction(limit, itemsToScroll) {\n  return {\n    type: NEXT_ITEM,\n    limit: limit,\n    itemsToScroll: itemsToScroll\n  };\n};\n\nvar prevItemAction = function prevItemAction(limit, itemsToScroll) {\n  return {\n    type: PREV_ITEM,\n    limit: limit,\n    itemsToScroll: itemsToScroll\n  };\n};\n\nfunction _templateObject$6() {\n  var data = _taggedTemplateLiteral([\"\\n  box-sizing: border-box;\\n  padding: 0;\\n  transition: all 250ms ease;\\n  border: none;\\n  margin: 5px;\\n  background-color: \", \";\\n  font-size: 1.3em;\\n  content: \\\"\\\";\\n  height: 10px;\\n  width: 10px;\\n  box-shadow: \", \";\\n  border-radius: 50%;\\n  outline: none;\\n  &:hover,\\n  &:focus {\\n    cursor: pointer;\\n    box-shadow: \", \";\\n  }\\n\"]);\n\n  _templateObject$6 = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nvar boxShadow = \"transparent\";\nvar activeBoxShadow = \"transparent\";\nvar hoveredBoxShadow = \"transparent\";\nvar Dot = styled.button.attrs(function (_ref) {\n  var _ref$type = _ref.type,\n      type = _ref$type === void 0 ? \"button\" : _ref$type;\n  return {\n    type: type\n  };\n})(_templateObject$6(), function (_ref2) {\n  var active = _ref2.active;\n  return active ? \"transparent\" : \"transparent\";\n}, function (_ref3) {\n  var active = _ref3.active;\n  return active ? activeBoxShadow : boxShadow;\n}, function (_ref4) {\n  var active = _ref4.active;\n  return active ? activeBoxShadow : hoveredBoxShadow;\n});\n\nvar DotContainer = /*#__PURE__*/function (_React$Component) {\n  _inherits(DotContainer, _React$Component);\n\n  var _super = _createSuper(DotContainer);\n\n  function DotContainer() {\n    var _this;\n\n    _classCallCheck(this, DotContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"onClick\", function () {\n      var _this$props = _this.props,\n          onClick = _this$props.onClick,\n          id = _this$props.id;\n      onClick(id);\n    });\n\n    return _this;\n  }\n\n  _createClass(DotContainer, [{\n    key: \"render\",\n    value: function render() {\n      var active = this.props.active;\n      return /*#__PURE__*/React.createElement(Dot, {\n        tabIndex: active ? -1 : 0,\n        onClick: this.onClick,\n        active: active,\n        className: \"\".concat(cssPrefix(\"dot\"), \" \").concat(active ? cssPrefix(\"dot_active\") : \"\")\n      });\n    }\n  }]);\n\n  return DotContainer;\n}(React.Component);\n\nDotContainer.propTypes = {\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  active: PropTypes.bool,\n  onClick: PropTypes.func\n};\n\nfunction _templateObject$7() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-wrap: wrap;\\n  margin-top: 15px;\\n\"]);\n\n  _templateObject$7 = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nvar Indicators = styled.div(_templateObject$7());\n\nvar Pagination = /*#__PURE__*/function (_React$Component) {\n  _inherits(Pagination, _React$Component);\n\n  var _super = _createSuper(Pagination);\n\n  function Pagination() {\n    _classCallCheck(this, Pagination);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Pagination, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          numOfPages = _this$props.numOfPages,\n          activePage = _this$props.activePage,\n          onClick = _this$props.onClick;\n      var pages = numberToArray(numOfPages);\n      return /*#__PURE__*/React.createElement(Indicators, {\n        className: cssPrefix(\"pagination\")\n      }, pages.map(function (item, i) {\n        // return React.createElement(\"\");\n        return /*#__PURE__*/React.createElement(DotContainer, {\n          key: i,\n          id: i,\n          active: i === activePage,\n          onClick: onClick\n        });\n      }));\n    }\n  }]);\n\n  return Pagination;\n}(React.Component);\n\nPagination.defaultProps = {\n  onClick: noop\n};\nPagination.propTypes = {\n  numOfPages: PropTypes.number.isRequired,\n  activePage: PropTypes.number.isRequired,\n  onClick: PropTypes.func\n};\n\nvar Carousel = /*#__PURE__*/function (_React$Component) {\n  _inherits(Carousel, _React$Component);\n\n  var _super = _createSuper(Carousel);\n\n  function Carousel() {\n    var _this;\n\n    _classCallCheck(this, Carousel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"isComponentMounted\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      rootHeight: 0,\n      childHeight: 0,\n      sliderPosition: 0,\n      swipedSliderPosition: 0,\n      isSwiping: false,\n      transitioning: false,\n      transitionMs: _this.props.transitionMs,\n      activeIndex: _this.props.initialActiveIndex || _this.props.initialFirstItem,\n      // support deprecated  initialFirstItem\n      pages: [],\n      activePage: 0,\n      sliderContainerWidth: 0\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setRef\", function (name) {\n      return function (ref) {\n        return _this[name] = ref;\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"initResizeObserver\", function () {\n      _this.ro = new ResizeObserver(function (entries, observer) {\n        var _iterator = _createForOfIteratorHelper(entries),\n            _step;\n\n        try {\n          var _loop = function _loop() {\n            var entry = _step.value;\n\n            if (entry.target === _this.sliderContainer) {\n              // we are using rAF because it fixes the infinite refresh with gatsby (ssr?).\n              // TBH, I'm not sure i fully understand why.\n              // see https://github.com/sag1v/react-elastic-carousel/issues/107\n              window.requestAnimationFrame(function () {\n                _this.onContainerResize(entry);\n              });\n            }\n\n            if (entry.target === _this.slider) {\n              // we are using rAF because it fixes the infinite refresh with gatsby (ssr?).\n              // TBH, I'm not sure i fully understand why\n              // see https://github.com/sag1v/react-elastic-carousel/issues/107\n              window.requestAnimationFrame(function () {\n                _this.onSliderResize(entry);\n              });\n            }\n          };\n\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            _loop();\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      });\n\n      _this.ro.observe(_this.sliderContainer);\n\n      _this.ro.observe(_this.slider);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"unSubscribeObserver\", function () {\n      return _this.ro.disconnect();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setAutoPlay\", function () {\n      var _this$getDerivedProps = _this.getDerivedPropsFromBreakPoint(),\n          autoPlaySpeed = _this$getDerivedProps.autoPlaySpeed;\n\n      _this.autoPlayIntervalId = setInterval(function () {\n        if (_this.isComponentMounted) {\n          var transitioning = _this.state.transitioning;\n\n          if (!transitioning) {\n            _this.slideNext();\n          }\n        }\n      }, autoPlaySpeed);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"removeAutoPlay\", function () {\n      if (_this.autoPlayIntervalId) {\n        clearInterval(_this.autoPlayIntervalId);\n        _this.autoPlayIntervalId = null;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setPages\", function () {\n      var numOfPages = _this.getNumOfPages();\n\n      var pages = numberToArray(numOfPages);\n\n      _this.setState({\n        pages: pages\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSliderTransitionEnd\", function (fn) {\n      _this.slider.addEventListener(\"transitionend\", fn);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"removeSliderTransitionHook\", function (fn) {\n      _this.slider.removeEventListener(\"transitionend\", fn);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getDerivedPropsFromBreakPoint\", function () {\n      var _this$props = _this.props,\n          breakPoints = _this$props.breakPoints,\n          restOfProps = _objectWithoutProperties(_this$props, [\"breakPoints\"]);\n\n      var sliderContainerWidth = _this.state.sliderContainerWidth; // default breakpoint from individual props\n\n      var currentBreakPoint; // if breakpoints were added as props override the individual props\n\n      if (breakPoints && breakPoints.length > 0) {\n        currentBreakPoint = breakPoints.slice() // no mutations\n        .reverse() // so we can find last match\n        .find(function (bp) {\n          return bp.width <= sliderContainerWidth;\n        });\n\n        if (!currentBreakPoint) {\n          /* in case we don't have a lower width than sliderContainerWidth\n           * this mostly happens in initilization when sliderContainerWidth is 0\n           */\n          currentBreakPoint = breakPoints[0];\n        }\n      } // merge direct props with current breakpoint Props\n\n\n      return _objectSpread2(_objectSpread2({}, restOfProps), currentBreakPoint);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updateSliderPosition\", function () {\n      _this.setState(function (state) {\n        var _this$getDerivedProps2 = _this.getDerivedPropsFromBreakPoint(),\n            children = _this$getDerivedProps2.children,\n            verticalMode = _this$getDerivedProps2.verticalMode,\n            itemsToShow = _this$getDerivedProps2.itemsToShow,\n            transitionMs = _this$getDerivedProps2.transitionMs;\n\n        var childHeight = state.childHeight,\n            activeIndex = state.activeIndex;\n\n        var childWidth = _this.calculateChildWidth();\n\n        var totalItems = Children.toArray(children).length;\n        var hiddenSlots = totalItems - itemsToShow;\n        var moveBy = activeIndex * -1;\n        var emptySlots = itemsToShow - (totalItems - activeIndex);\n\n        if (emptySlots > 0 && hiddenSlots > 0) {\n          moveBy = emptySlots + activeIndex * -1;\n        }\n\n        var sliderPosition = (verticalMode ? childHeight : childWidth) * moveBy;\n        var newActiveIndex = emptySlots > 0 ? activeIndex - emptySlots : activeIndex; // go back from 0ms to whatever set by the user\n        // We were at 0ms because we wanted to disable animation on resize\n        // see https://github.com/sag1v/react-elastic-carousel/issues/94\n\n        window.requestAnimationFrame(function () {\n          if (_this.isComponentMounted) {\n            _this.setState({\n              transitionMs: transitionMs\n            });\n          }\n        });\n        return {\n          sliderPosition: sliderPosition,\n          activeIndex: newActiveIndex < 0 ? 0 : newActiveIndex\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSliderResize\", function (sliderNode) {\n      if (!_this.isComponentMounted) {\n        return;\n      }\n\n      var _this$getDerivedProps3 = _this.getDerivedPropsFromBreakPoint(),\n          verticalMode = _this$getDerivedProps3.verticalMode,\n          children = _this$getDerivedProps3.children,\n          itemsToShow = _this$getDerivedProps3.itemsToShow;\n\n      var sliderHeight = sliderNode.contentRect.height;\n      var nextState = {};\n      var childrenLength = Children.toArray(children).length;\n\n      if (verticalMode) {\n        var childHeight = sliderHeight / childrenLength; // We use Math.min because we don't want to make the child smaller\n        // if the number of children is smaller than itemsToShow.\n        // (Because we do not want \"empty slots\")\n\n        nextState.rootHeight = childHeight * Math.min(childrenLength, itemsToShow);\n        nextState.childHeight = childHeight;\n      } else {\n        nextState.rootHeight = sliderHeight;\n      }\n\n      _this.setState(nextState);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"calculateChildWidth\", function () {\n      var sliderContainerWidth = _this.state.sliderContainerWidth;\n\n      var _this$getDerivedProps4 = _this.getDerivedPropsFromBreakPoint(),\n          verticalMode = _this$getDerivedProps4.verticalMode,\n          itemsToShow = _this$getDerivedProps4.itemsToShow,\n          showEmptySlots = _this$getDerivedProps4.showEmptySlots,\n          children = _this$getDerivedProps4.children;\n      /* based on slider container's width, get num of items to show\n          * and calculate child's width (and update it in state)\n          */\n\n\n      var childrenLength = Children.toArray(children).length || 1;\n      var childWidth = 0;\n\n      if (verticalMode) {\n        childWidth = sliderContainerWidth;\n      } else {\n        // When \"showEmptySlots\" is false\n        // We use Math.min because we don't want to make the child smaller\n        // if the number of children is smaller than itemsToShow.\n        // (Because we do not want \"empty slots\")\n        childWidth = sliderContainerWidth / (showEmptySlots ? itemsToShow : Math.min(childrenLength, itemsToShow));\n      }\n\n      return childWidth;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onContainerResize\", function (sliderContainerNode) {\n      var newSliderContainerWidth = sliderContainerNode.contentRect.width; // update slider container width\n      // disable animation on resize see https://github.com/sag1v/react-elastic-carousel/issues/94\n\n      var _this$getDerivedProps5 = _this.getDerivedPropsFromBreakPoint(),\n          outerSpacing = _this$getDerivedProps5.outerSpacing,\n          initialVerticalMode = _this$getDerivedProps5.verticalMode;\n\n      var containerWidth = newSliderContainerWidth - (initialVerticalMode ? 0 : outerSpacing * 2);\n\n      if (!_this.isComponentMounted || _this.state.sliderContainerWidth === newSliderContainerWidth) {\n        // prevent infinite loop\n        return;\n      }\n\n      _this.setState({\n        sliderContainerWidth: containerWidth,\n        transitionMs: 0\n      }, function () {\n        // we must get these props inside setState (get future props because its async)\n        var _this$getDerivedProps6 = _this.getDerivedPropsFromBreakPoint(),\n            onResize = _this$getDerivedProps6.onResize,\n            itemsToShow = _this$getDerivedProps6.itemsToShow,\n            children = _this$getDerivedProps6.children;\n\n        var childrenLength = Children.toArray(children).length || 1;\n\n        _this.setState(function (currentState) {\n          // We might need to change the selected index when the size of the container changes\n          // we are making sure the selected index is not out of boundaries and respecting itemsToShow\n          // This usually happens with breakpoints. see https://github.com/sag1v/react-elastic-carousel/issues/122\n          var activeIndex = currentState.activeIndex; // we take the lowest, in case itemsToShow is greater than childrenLength\n\n          var maxItemsToShow = Math.min(childrenLength, itemsToShow);\n          var endLimit = childrenLength - maxItemsToShow;\n\n          if (activeIndex > endLimit) {\n            activeIndex = endLimit;\n          }\n\n          return {\n            activeIndex: activeIndex\n          };\n        }, function () {\n          /* Based on all of the above new data:\n          * update slider position\n          * get the new current breakpoint\n          * pass the current breakpoint to the consumer's callback\n          */\n          _this.updateSliderPosition();\n\n          var currentBreakPoint = _this.getDerivedPropsFromBreakPoint();\n\n          onResize(currentBreakPoint);\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"tiltMovement\", function (position) {\n      var distance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 20;\n      var duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 150;\n\n      _this.setState(function (state) {\n        return {\n          isSwiping: true,\n          swipedSliderPosition: position - distance\n        };\n      });\n\n      setTimeout(function () {\n        _this.setState({\n          isSwiping: false,\n          swipedSliderPosition: 0\n        });\n      }, duration);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"convertChildToCbObj\", function (index) {\n      var _this$getDerivedProps7 = _this.getDerivedPropsFromBreakPoint(),\n          children = _this$getDerivedProps7.children; // support decimal itemsToShow\n\n\n      var roundedIdx = Math.round(index);\n      var child = Children.toArray(children)[roundedIdx];\n      return {\n        item: child.props,\n        index: roundedIdx\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getNextItemIndex\", function (currentIndex, getPrev) {\n      var _this$getDerivedProps8 = _this.getDerivedPropsFromBreakPoint(),\n          children = _this$getDerivedProps8.children,\n          itemsToShow = _this$getDerivedProps8.itemsToShow,\n          itemsToScroll = _this$getDerivedProps8.itemsToScroll;\n\n      var childrenLength = Children.toArray(children).length || 1;\n      var notEnoughItemsToShow = itemsToShow > childrenLength;\n      var limit = getPrev ? 0 : childrenLength - itemsToShow;\n\n      if (notEnoughItemsToShow) {\n        limit = 0; // basically don't move\n      }\n\n      var nextAction = getPrev ? prevItemAction(0, itemsToScroll) : nextItemAction(limit, itemsToScroll);\n      var nextItem = activeIndexReducer(currentIndex, nextAction);\n      return nextItem;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getNextItemObj\", function (getPrev) {\n      var _this$getDerivedProps9 = _this.getDerivedPropsFromBreakPoint(),\n          children = _this$getDerivedProps9.children;\n\n      var activeIndex = _this.state.activeIndex;\n\n      var nextItemIndex = _this.getNextItemIndex(activeIndex, getPrev); // support decimal itemsToShow\n\n\n      var roundedIdx = Math.round(nextItemIndex);\n      var asElement = Children.toArray(children)[roundedIdx];\n      var asObj = {\n        item: asElement.props,\n        index: roundedIdx\n      };\n      return asObj;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"resetSwipe\", function () {\n      _this.setState({\n        swipedSliderPosition: 0,\n        transitioning: false,\n        isSwiping: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSwiping\", function (data) {\n      var deltaX = data.deltaX,\n          absX = data.absX,\n          deltaY = data.deltaY,\n          absY = data.absY,\n          dir = data.dir;\n\n      _this.setState(function (state) {\n        var childHeight = state.childHeight,\n            activeIndex = state.activeIndex,\n            sliderPosition = state.sliderPosition;\n\n        var _this$getDerivedProps10 = _this.getDerivedPropsFromBreakPoint(),\n            itemsToShow = _this$getDerivedProps10.itemsToShow,\n            verticalMode = _this$getDerivedProps10.verticalMode,\n            children = _this$getDerivedProps10.children,\n            isRTL = _this$getDerivedProps10.isRTL;\n\n        var childWidth = _this.calculateChildWidth(); // determine how far can user swipe\n\n\n        var childrenLength = Children.toArray(children).length || 1;\n        var goingNext = !verticalMode && dir === \"Left\" && !isRTL || !verticalMode && dir === \"Right\" && isRTL || verticalMode && dir === \"Up\";\n        var goingBack = !verticalMode && dir === \"Right\" && !isRTL || !verticalMode && dir === \"Left\" && isRTL || verticalMode && dir === \"Down\";\n        var horizontalSwipe = dir === \"Left\" || dir === \"Right\";\n        var verticalSwipe = dir === \"Up\" || dir === \"Down\";\n        var horizontalMode = !verticalMode;\n        var distanceSwipe = 0;\n        var horizontalEdgeStoppage = childWidth / 2;\n        var verticalEdgeStoppage = childHeight / 2;\n\n        if (verticalMode) {\n          if (verticalSwipe) {\n            var trackSize = childrenLength * childHeight;\n\n            if (goingNext) {\n              distanceSwipe = trackSize - childHeight * activeIndex - itemsToShow * childHeight + verticalEdgeStoppage;\n            } else if (goingBack) {\n              distanceSwipe = childHeight * activeIndex + verticalEdgeStoppage;\n            }\n          }\n        } else {\n          if (horizontalSwipe) {\n            var _trackSize = childrenLength * childWidth;\n\n            if (goingNext) {\n              distanceSwipe = _trackSize - childWidth * activeIndex - itemsToShow * childWidth + horizontalEdgeStoppage;\n            } else if (goingBack) {\n              distanceSwipe = childWidth * activeIndex + horizontalEdgeStoppage;\n            }\n          }\n        }\n\n        var shouldHorizontalSkipUpdate = horizontalMode && verticalSwipe || horizontalMode && horizontalSwipe && absX > distanceSwipe;\n        var shouldVerticalSkipUpdate = verticalMode && horizontalSwipe || verticalMode && verticalSwipe && absY > distanceSwipe;\n\n        if (shouldHorizontalSkipUpdate || shouldVerticalSkipUpdate) {\n          // bail out of state update\n          return;\n        }\n\n        var swipedSliderPosition;\n\n        if (horizontalSwipe) {\n          if (isRTL) {\n            swipedSliderPosition = sliderPosition + deltaX;\n          } else {\n            swipedSliderPosition = sliderPosition - deltaX;\n          }\n        } else {\n          swipedSliderPosition = sliderPosition - deltaY;\n        }\n\n        return {\n          swipedSliderPosition: swipedSliderPosition,\n          isSwiping: true,\n          transitioning: true\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSwiped\", function (data) {\n      // we need to handle all scenarios:\n      // 1. Horizontal mode - swipe left or right\n      // 2. Horizontal mode with RTL - swipe left or right\n      // 3. vertical mode - swipe up or down\n      var absX = data.absX,\n          absY = data.absY,\n          dir = data.dir;\n      var _this$state = _this.state,\n          childHeight = _this$state.childHeight,\n          activeIndex = _this$state.activeIndex;\n\n      var _this$getDerivedProps11 = _this.getDerivedPropsFromBreakPoint(),\n          verticalMode = _this$getDerivedProps11.verticalMode,\n          isRTL = _this$getDerivedProps11.isRTL,\n          itemsToScroll = _this$getDerivedProps11.itemsToScroll;\n\n      var childWidth = _this.calculateChildWidth();\n\n      var func = _this.resetSwipe;\n      var minSwipeDistanceHorizontal = childWidth / 5;\n      var minSwipeDistanceVertical = childHeight / 5;\n      var swipedLeft = dir === \"Left\";\n      var swipedRight = dir === \"Right\";\n      var swipedUp = dir === \"Up\";\n      var swipedDown = dir === \"Down\";\n      var verticalGoSwipe = verticalMode && (swipedUp || swipedDown) && absY > minSwipeDistanceVertical;\n      var horizontalGoSwipe = !verticalMode && (swipedRight || swipedLeft) && absX > minSwipeDistanceHorizontal;\n      var goodToGo = false;\n\n      if (verticalGoSwipe || horizontalGoSwipe) {\n        goodToGo = true;\n      }\n\n      if (goodToGo) {\n        // we should go to a different item\n        // determine what method we need to invoke\n        if (verticalMode) {\n          // get number of slides from user's swiping\n          var numberOfSlidesViaSwipe = Math.ceil((absY - minSwipeDistanceVertical) / childHeight); // if user swipes more than itemsToScroll then we want to bypass itemsToScroll for a smoother scroll\n\n          var numberOfSlidesTogo = Math.max(itemsToScroll, numberOfSlidesViaSwipe);\n          var backSlidesToGo = activeIndex - numberOfSlidesTogo;\n          var forwardSlideTtoGo = activeIndex + numberOfSlidesTogo; // up or down\n\n          if (swipedDown) {\n            // func = this.onPrevStart;\n            func = function func() {\n              return _this.goTo(backSlidesToGo);\n            };\n          }\n\n          if (swipedUp) {\n            // func = this.onNextStart;\n            func = function func() {\n              return _this.goTo(forwardSlideTtoGo);\n            };\n          }\n        } else {\n          // get number of slides from user's swiping\n          var _numberOfSlidesViaSwipe = Math.ceil((absX - minSwipeDistanceHorizontal) / childWidth); // if user swipes more than itemsToScroll then we want to bypass itemsToScroll for a smoother scroll\n\n\n          var _numberOfSlidesTogo = Math.max(itemsToScroll, _numberOfSlidesViaSwipe);\n\n          var _backSlidesToGo = activeIndex - _numberOfSlidesTogo;\n\n          var _forwardSlideTtoGo = activeIndex + _numberOfSlidesTogo; // horizontal mode\n\n\n          if (isRTL) {\n            // flip sides\n            if (swipedLeft) {\n              // func = this.onPrevStart;\n              func = function func() {\n                return _this.goTo(_backSlidesToGo);\n              };\n            }\n\n            if (swipedRight) {\n              // func = this.onNextStart;\n              func = function func() {\n                return _this.goTo(_forwardSlideTtoGo);\n              };\n            }\n          } else {\n            // normal behavior\n            if (swipedLeft) {\n              // func = this.onNextStart;\n              func = function func() {\n                return _this.goTo(_forwardSlideTtoGo);\n              };\n            }\n\n            if (swipedRight) {\n              // func = this.onPrevStart;\n              func = function func() {\n                return _this.goTo(_backSlidesToGo);\n              };\n            }\n          }\n        }\n      } // we are not \"tilting\" on edges, so we need to reset isSwiping and transitioning.\n      // otherwise we wont slide back to edge\n\n\n      _this.setState({\n        isSwiping: false,\n        transitioning: false\n      });\n\n      func({\n        skipTilt: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onNextStart\", function (options) {\n      var _this$getDerivedProps12 = _this.getDerivedPropsFromBreakPoint(),\n          onNextStart = _this$getDerivedProps12.onNextStart;\n\n      var activeIndex = _this.state.activeIndex;\n\n      var nextItemObj = _this.getNextItemObj();\n\n      var prevItemObj = _this.convertChildToCbObj(activeIndex);\n\n      onNextStart(prevItemObj, nextItemObj);\n\n      _this.slideNext(options);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onPrevStart\", function (options) {\n      var _this$getDerivedProps13 = _this.getDerivedPropsFromBreakPoint(),\n          onPrevStart = _this$getDerivedProps13.onPrevStart;\n\n      var activeIndex = _this.state.activeIndex;\n\n      var nextItemObj = _this.getNextItemObj(true);\n\n      var prevItemObj = _this.convertChildToCbObj(activeIndex);\n\n      onPrevStart(prevItemObj, nextItemObj);\n\n      _this.slidePrev(options);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"slideNext\", function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var skipTilt = options.skipTilt;\n\n      var _this$getDerivedProps14 = _this.getDerivedPropsFromBreakPoint(),\n          enableTilt = _this$getDerivedProps14.enableTilt;\n\n      var _this$state2 = _this.state,\n          activeIndex = _this$state2.activeIndex,\n          sliderPosition = _this$state2.sliderPosition;\n\n      var nextItem = _this.getNextItemIndex(activeIndex, false);\n\n      if (activeIndex !== nextItem) {\n        _this.goTo(nextItem);\n      } else if (enableTilt && !skipTilt) {\n        _this.tiltMovement(sliderPosition, 20, 150);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"slidePrev\", function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var skipTilt = options.skipTilt;\n      var activeIndex = _this.state.activeIndex;\n\n      var _this$getDerivedProps15 = _this.getDerivedPropsFromBreakPoint(),\n          enableTilt = _this$getDerivedProps15.enableTilt;\n\n      var prevItem = _this.getNextItemIndex(activeIndex, true);\n\n      if (activeIndex !== prevItem) {\n        _this.goTo(prevItem);\n      } else if (enableTilt && !skipTilt) {\n        _this.tiltMovement(0, -20, 150);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onNextEnd\", function () {\n      var _this$getDerivedProps16 = _this.getDerivedPropsFromBreakPoint(),\n          onNextEnd = _this$getDerivedProps16.onNextEnd,\n          onChange = _this$getDerivedProps16.onChange;\n\n      var _this$state3 = _this.state,\n          activeIndex = _this$state3.activeIndex,\n          activePage = _this$state3.activePage;\n\n      var nextItemObj = _this.convertChildToCbObj(activeIndex);\n\n      _this.removeSliderTransitionHook(_this.onNextEnd);\n\n      _this.setState({\n        transitioning: false\n      });\n\n      onChange && onChange(nextItemObj, activePage);\n      onNextEnd(nextItemObj, activePage);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onPrevEnd\", function () {\n      var _this$getDerivedProps17 = _this.getDerivedPropsFromBreakPoint(),\n          onPrevEnd = _this$getDerivedProps17.onPrevEnd,\n          onChange = _this$getDerivedProps17.onChange;\n\n      var _this$state4 = _this.state,\n          activeIndex = _this$state4.activeIndex,\n          activePage = _this$state4.activePage;\n\n      var nextItemObj = _this.convertChildToCbObj(activeIndex);\n\n      _this.removeSliderTransitionHook(_this.onPrevEnd);\n\n      _this.setState({\n        transitioning: false\n      });\n\n      onChange && onChange(nextItemObj, activePage);\n      onPrevEnd(nextItemObj, activePage);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"generatePositionUpdater\", function (direction, nextItemId, verticalMode, rest) {\n      return function (state) {\n        var sliderPosition = state.sliderPosition,\n            childHeight = state.childHeight,\n            activeIndex = state.activeIndex;\n\n        var childWidth = _this.calculateChildWidth();\n\n        var newSliderPosition = 0;\n        var childSize = verticalMode ? childHeight : childWidth;\n\n        if (direction === consts.NEXT) {\n          newSliderPosition = sliderPosition - childSize * (nextItemId - activeIndex);\n        } else {\n          newSliderPosition = sliderPosition + childSize * (activeIndex - nextItemId);\n        }\n\n        return _objectSpread2({\n          sliderPosition: newSliderPosition,\n          activeIndex: nextItemId,\n          swipedSliderPosition: 0,\n          isSwiping: false\n        }, rest);\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"goTo\", function (nextItemId) {\n      var _this$getDerivedProps18 = _this.getDerivedPropsFromBreakPoint(),\n          children = _this$getDerivedProps18.children,\n          verticalMode = _this$getDerivedProps18.verticalMode,\n          itemsToShow = _this$getDerivedProps18.itemsToShow;\n\n      var activeIndex = _this.state.activeIndex;\n      var childrenLength = Children.toArray(children).length;\n      var safeNextItemId = Math.max(0, nextItemId); // don't allow negative numbers\n\n      var isPrev = activeIndex > safeNextItemId;\n\n      var nextAvailableItem = _this.getNextItemIndex(activeIndex, isPrev);\n\n      var noChange = nextAvailableItem === activeIndex;\n      var outOfBoundary = safeNextItemId + itemsToShow >= childrenLength;\n\n      if (noChange) {\n        return;\n      }\n\n      if (outOfBoundary) {\n        // Either go to last index (respect itemsToShow) or 0 index if we can't fill the slider\n        safeNextItemId = Math.max(0, childrenLength - itemsToShow);\n      }\n\n      var direction = consts.NEXT;\n      var positionEndCb = _this.onNextEnd;\n\n      if (isPrev) {\n        direction = consts.PREV;\n        positionEndCb = _this.onPrevEnd;\n      }\n\n      var stateUpdater = _this.generatePositionUpdater(direction, safeNextItemId, verticalMode, {\n        transitioning: true\n      });\n\n      _this.setState(stateUpdater, function () {\n        // callback\n        pipe(_this.updateActivePage(), _this.onSliderTransitionEnd(positionEndCb));\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getNumOfPages\", function () {\n      var _this$getDerivedProps19 = _this.getDerivedPropsFromBreakPoint(),\n          children = _this$getDerivedProps19.children,\n          itemsToShow = _this$getDerivedProps19.itemsToShow;\n\n      var childrenLength = Children.toArray(children).length;\n      var safeItemsToShow = Math.max(itemsToShow, 1);\n      var numOfPages = Math.ceil(childrenLength / safeItemsToShow);\n      return numOfPages || 1;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updateActivePage\", function () {\n      _this.setState(function (state) {\n        var _this$getDerivedProps20 = _this.getDerivedPropsFromBreakPoint(),\n            itemsToShow = _this$getDerivedProps20.itemsToShow,\n            children = _this$getDerivedProps20.children;\n\n        var activeIndex = state.activeIndex,\n            activePage = state.activePage;\n\n        var numOfPages = _this.getNumOfPages();\n\n        var childrenLength = Children.toArray(children).length;\n        var inRangeItemsToShow = Math.min(childrenLength, itemsToShow); // watch out from 0 (so we wont divide by zero)\n\n        var safeItemsToShow = Math.max(inRangeItemsToShow, 1);\n        var newActivePage = Math.ceil(activeIndex / safeItemsToShow);\n        var inRangeActivePageIndex = Math.min(numOfPages - 1, newActivePage);\n\n        if (activePage !== inRangeActivePageIndex) {\n          return {\n            activePage: inRangeActivePageIndex\n          };\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onIndicatorClick\", function (indicatorId) {\n      var _this$getDerivedProps21 = _this.getDerivedPropsFromBreakPoint(),\n          itemsToShow = _this$getDerivedProps21.itemsToShow;\n\n      var gotoIndex = indicatorId * itemsToShow;\n\n      _this.setState({\n        activePage: indicatorId\n      });\n\n      _this.goTo(gotoIndex);\n    });\n\n    return _this;\n  }\n\n  _createClass(Carousel, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.isComponentMounted = true;\n      this.initResizeObserver();\n      this.updateActivePage();\n      this.setPages();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this$props2 = this.props,\n          enableAutoPlay = _this$props2.enableAutoPlay,\n          children = _this$props2.children,\n          itemsToShow = _this$props2.itemsToShow,\n          itemsToScroll = _this$props2.itemsToScroll,\n          breakPoints = _this$props2.breakPoints;\n      var _this$state5 = this.state,\n          activeIndex = _this$state5.activeIndex,\n          sliderContainerWidth = _this$state5.sliderContainerWidth;\n      var nextItem = this.getNextItemIndex(activeIndex, false);\n      var currentChildrenLength = Children.toArray(children).length;\n      var prevChildrenLength = Children.toArray(prevProps.children).length; // update pages (for pagination)\n\n      if (prevChildrenLength !== currentChildrenLength || prevProps.itemsToShow !== itemsToShow || prevProps.itemsToScroll !== itemsToScroll || prevProps.breakPoints !== breakPoints || sliderContainerWidth !== prevState.sliderContainerWidth) {\n        // we mimic a container resize to recalculate item width when itemsToShow are updated\n        this.onContainerResize({\n          contentRect: {\n            width: sliderContainerWidth\n          }\n        });\n        this.setPages();\n        this.updateActivePage();\n      } // autoplay update\n\n\n      if (activeIndex === nextItem) {\n        this.removeAutoPlay();\n      } else if (enableAutoPlay && !this.autoPlayIntervalId) {\n        this.setAutoPlay();\n      } else if (!enableAutoPlay && this.autoPlayIntervalId) {\n        this.removeAutoPlay();\n      }\n\n      if (prevChildrenLength !== currentChildrenLength) {\n        var _this$getDerivedProps22 = this.getDerivedPropsFromBreakPoint(),\n            calculatedItemsToShow = _this$getDerivedProps22.itemsToShow; // number of items is reduced (we don't care if number of items is increased)\n        // we need to check if our current index is not out of boundaries\n        // we need to include itemsToShow so we can fill up the slots\n\n\n        var lastIndex = currentChildrenLength - 1;\n        var isOutOfRange = activeIndex + calculatedItemsToShow > lastIndex;\n\n        if (isOutOfRange) {\n          // we are out of boundaries, go \"back\" to last item of the list (respect itemsToShow)\n          this.goTo(Math.max(0, currentChildrenLength - calculatedItemsToShow));\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isComponentMounted = false;\n      this.removeAutoPlay();\n      this.unSubscribeObserver();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state6 = this.state,\n          activePage = _this$state6.activePage,\n          isSwiping = _this$state6.isSwiping,\n          sliderPosition = _this$state6.sliderPosition,\n          swipedSliderPosition = _this$state6.swipedSliderPosition,\n          rootHeight = _this$state6.rootHeight,\n          pages = _this$state6.pages,\n          activeIndex = _this$state6.activeIndex,\n          transitionMs = _this$state6.transitionMs;\n\n      var _this$getDerivedProps23 = this.getDerivedPropsFromBreakPoint(),\n          className = _this$getDerivedProps23.className,\n          style = _this$getDerivedProps23.style,\n          itemsToShow = _this$getDerivedProps23.itemsToShow,\n          itemsToScroll = _this$getDerivedProps23.itemsToScroll,\n          verticalMode = _this$getDerivedProps23.verticalMode,\n          isRTL = _this$getDerivedProps23.isRTL,\n          easing = _this$getDerivedProps23.easing,\n          tiltEasing = _this$getDerivedProps23.tiltEasing,\n          children = _this$getDerivedProps23.children,\n          focusOnSelect = _this$getDerivedProps23.focusOnSelect,\n          autoTabIndexVisibleItems = _this$getDerivedProps23.autoTabIndexVisibleItems,\n          itemPosition = _this$getDerivedProps23.itemPosition,\n          itemPadding = _this$getDerivedProps23.itemPadding,\n          outerSpacing = _this$getDerivedProps23.outerSpacing,\n          enableSwipe = _this$getDerivedProps23.enableSwipe,\n          enableMouseSwipe = _this$getDerivedProps23.enableMouseSwipe,\n          pagination = _this$getDerivedProps23.pagination,\n          showArrows = _this$getDerivedProps23.showArrows,\n          disableArrowsOnEnd = _this$getDerivedProps23.disableArrowsOnEnd,\n          preventDefaultTouchmoveEvent = _this$getDerivedProps23.preventDefaultTouchmoveEvent,\n          renderArrow = _this$getDerivedProps23.renderArrow,\n          renderPagination = _this$getDerivedProps23.renderPagination;\n\n      var childWidth = this.calculateChildWidth();\n      var numOfPages = this.getNumOfPages();\n      /** Determine if arrows should be disabled */\n\n      var canSlidePrev = activeIndex !== this.getNextItemIndex(activeIndex, true);\n      var canSlideNext = activeIndex !== this.getNextItemIndex(activeIndex, false);\n      var disabledPrevArrow = !canSlidePrev && disableArrowsOnEnd;\n      var disabledNextArrow = !canSlideNext && disableArrowsOnEnd;\n      return /*#__PURE__*/React.createElement(CarouselWrapper, {\n        isRTL: isRTL,\n        className: \"\".concat(cssPrefix(\"carousel-wrapper\"), \" \").concat(className),\n        style: style\n      }, /*#__PURE__*/React.createElement(StyledCarousel, {\n        className: cssPrefix(\"carousel\"),\n        size: {\n          height: rootHeight\n        }\n      }, /*#__PURE__*/React.createElement(Only, {\n        when: showArrows\n      }, renderArrow ? renderArrow({\n        type: consts.PREV,\n        onClick: this.onPrevStart,\n        isEdge: !canSlidePrev\n      }) : /*#__PURE__*/React.createElement(Arrow, {\n        onClick: this.onPrevStart,\n        direction: verticalMode ? Arrow.up : Arrow.left,\n        disabled: disabledPrevArrow\n      })), /*#__PURE__*/React.createElement(SliderContainer, {\n        className: cssPrefix(\"slider-container\"),\n        ref: this.setRef(\"sliderContainer\")\n      }, /*#__PURE__*/React.createElement(Slider, {\n        verticalMode: verticalMode,\n        isRTL: isRTL,\n        easing: easing,\n        sliderPosition: sliderPosition,\n        swipedSliderPosition: swipedSliderPosition,\n        isSwiping: isSwiping,\n        transitionMs: transitionMs,\n        tiltEasing: tiltEasing,\n        className: cssPrefix(\"slider\"),\n        ref: this.setRef(\"slider\"),\n        outerSpacing: outerSpacing\n      }, /*#__PURE__*/React.createElement(Track, {\n        verticalMode: verticalMode,\n        children: Children.toArray(children),\n        childWidth: childWidth,\n        currentItem: activeIndex,\n        autoTabIndexVisibleItems: autoTabIndexVisibleItems,\n        itemsToShow: itemsToShow,\n        itemsToScroll: itemsToScroll,\n        itemPosition: itemPosition,\n        itemPadding: itemPadding,\n        enableSwipe: enableSwipe,\n        enableMouseSwipe: enableMouseSwipe,\n        preventDefaultTouchmoveEvent: preventDefaultTouchmoveEvent,\n        onSwiped: this.onSwiped,\n        onSwiping: this.onSwiping,\n        onItemClick: focusOnSelect ? this.goTo : undefined\n      }))), /*#__PURE__*/React.createElement(Only, {\n        when: showArrows\n      }, renderArrow ? renderArrow({\n        type: consts.NEXT,\n        onClick: this.onNextStart,\n        isEdge: !canSlideNext\n      }) : /*#__PURE__*/React.createElement(Arrow, {\n        onClick: this.onNextStart,\n        direction: verticalMode ? Arrow.down : Arrow.right,\n        disabled: disabledNextArrow\n      }))), /*#__PURE__*/React.createElement(Only, {\n        when: pagination\n      }, renderPagination ? renderPagination({\n        pages: pages,\n        activePage: activePage,\n        onClick: this.onIndicatorClick\n      }) : /*#__PURE__*/React.createElement(Pagination, {\n        numOfPages: numOfPages,\n        activePage: activePage,\n        onClick: this.onIndicatorClick\n      })));\n    }\n  }]);\n\n  return Carousel;\n}(React.Component);\n\nCarousel.defaultProps = {\n  className: \"\",\n  style: {},\n  verticalMode: false,\n  isRTL: false,\n  initialFirstItem: 0,\n  initialActiveIndex: 0,\n  showArrows: true,\n  showEmptySlots: false,\n  disableArrowsOnEnd: true,\n  pagination: true,\n  easing: \"ease\",\n  tiltEasing: \"ease\",\n  transitionMs: 500,\n  enableTilt: true,\n  enableSwipe: true,\n  enableMouseSwipe: true,\n  preventDefaultTouchmoveEvent: false,\n  focusOnSelect: false,\n  autoTabIndexVisibleItems: true,\n  itemsToShow: 1,\n  itemsToScroll: 1,\n  itemPosition: consts.CENTER,\n  itemPadding: [0, 0, 0, 0],\n  outerSpacing: 0,\n  enableAutoPlay: false,\n  autoPlaySpeed: 2000,\n  // callbacks\n  onChange: noop,\n  onNextEnd: noop,\n  onPrevEnd: noop,\n  onNextStart: noop,\n  onPrevStart: noop,\n  onResize: noop\n};\nCarousel.propTypes = {\n  /** Items to render */\n  children: PropTypes.node.isRequired,\n\n  /** The css class for the root element */\n  className: PropTypes.string,\n\n  /** The style object for the root element */\n  style: PropTypes.object,\n\n  /** Display the Carousel in a vertical layout */\n  verticalMode: PropTypes.bool,\n\n  /** Flip right to left */\n  isRTL: PropTypes.bool,\n\n  /** Show dots for paging */\n  pagination: PropTypes.bool,\n\n  /** Animation speed */\n  transitionMs: PropTypes.number,\n\n  /** transition easing pattern */\n  easing: PropTypes.string,\n\n  /** transition easing pattern for the tilt */\n  tiltEasing: PropTypes.string,\n\n  /** The \"bump\" animation when reaching the last item */\n  enableTilt: PropTypes.bool,\n\n  /** Number of visible items  */\n  itemsToShow: PropTypes.number,\n\n  /** Number of items to scroll */\n  itemsToScroll: PropTypes.number,\n\n  /** Collection of objects with a width, itemsToShow and itemsToScroll  */\n  breakPoints: PropTypes.arrayOf(PropTypes.shape({\n    width: PropTypes.number.isRequired,\n    itemsToShow: PropTypes.number,\n    itemsToScroll: PropTypes.number\n  })),\n\n  /** The initial active index when the component mounts */\n  initialActiveIndex: PropTypes.number,\n\n  /** **DEPRECATED - use initialActiveIndex instead** The first items when the component mounts */\n  initialFirstItem: PropTypes.number,\n\n  /** Show the arrow buttons */\n  showArrows: PropTypes.bool,\n\n  /** Show empty slots when children.length < itemsToShow (not compatible with verticalMode yet !) */\n  showEmptySlots: PropTypes.bool,\n\n  /** Disables the arrow button when there are no more items */\n  disableArrowsOnEnd: PropTypes.bool,\n\n  /** Go to item on click */\n  focusOnSelect: PropTypes.bool,\n\n  /** Automatically inject `tabIndex:0` to visible items */\n  autoTabIndexVisibleItems: PropTypes.bool,\n\n  /** A render prop for the arrow component\n   * - ({type, onClick}) => <div onClick={onClick}>{type === 'prev' ? '<-' : '->'}</div>\n   */\n  renderArrow: PropTypes.func,\n\n  /** A render prop for the pagination component\n   * - ({ pages, activePage, onClick }) =>  <YourComponent/>\n   */\n  renderPagination: PropTypes.func,\n\n  /** Position the element relative to it's wrapper (use the consts object) - consts.START | consts.CENTER | consts.END */\n  itemPosition: PropTypes.oneOf([consts.START, consts.CENTER, consts.END]),\n\n  /** A padding for each element  */\n  itemPadding: PropTypes.array,\n\n  /** A margin at the beginning and at the end of the carousel (not compatible with verticalMode yet !) */\n  outerSpacing: PropTypes.number,\n  // swipe\n\n  /** Enable or disable swipe */\n  enableSwipe: PropTypes.bool,\n\n  /** Enable or disable mouse swipe */\n  enableMouseSwipe: PropTypes.bool,\n\n  /** Prevent page scroll on touchmove.\n   * Use this to stop the browser from scrolling while a user swipes.\n   * More details: https://github.com/FormidableLabs/react-swipeable#preventdefaulttouchmoveevent-details\n   */\n  preventDefaultTouchmoveEvent: PropTypes.bool,\n  // auto play\n\n  /** Enable or disable auto play */\n  enableAutoPlay: PropTypes.bool,\n\n  /** Set auto play speed (ms) */\n  autoPlaySpeed: PropTypes.number,\n  // callbacks\n\n  /** A callback for the change of an item\n   * - onChange(currentItemObject, currentPageIndex) => {} */\n  onChange: PropTypes.func,\n\n  /** A callback for the beginning of the next transition\n   * - onNextStart(prevItemObject, nextItemObject) => {} */\n  onNextStart: PropTypes.func,\n\n  /** A callback for the beginning of the prev transition\n   * - onPrevStart(prevItemObject, nextItemObject) => {} */\n  onPrevStart: PropTypes.func,\n\n  /** A callback for the end of the next transition\n   * - onNextEnd(nextItemObject, currentPageIndex) => {} */\n  onNextEnd: PropTypes.func,\n\n  /** A callback for the end of the prev transition\n   * - onPrevEnd(nextItemObject, currentPageIndex) => {} */\n  onPrevEnd: PropTypes.func,\n\n  /** A callback for the \"slider-container\" resize\n   * - onResize(currentBreakPoint) => {} */\n  onResize: PropTypes.func\n};\nexport default Carousel;\nexport { consts };","map":{"version":3,"sources":["../src/react-elastic-carousel/utils/helpers.js","../src/react-elastic-carousel/components/styled/Button.js","../src/react-elastic-carousel/consts.js","../src/react-elastic-carousel/components/styled/ItemWrapper.js","../src/react-elastic-carousel/components/styled/SliderContainer.js","../src/react-elastic-carousel/components/styled/Slider.js","../src/react-elastic-carousel/components/styled/StyledCarousel.js","../src/react-elastic-carousel/components/styled/CarouselWrapper.js","../src/react-elastic-carousel/components/ItemWrapperContainer.js","../src/react-elastic-carousel/components/Track.js","../src/react-elastic-carousel/components/Arrow.js","../src/react-elastic-carousel/actions/consts.js","../src/react-elastic-carousel/reducers/items.js","../src/react-elastic-carousel/actions/itemsActions.js","../src/react-elastic-carousel/components/Pagination/Dot.js","../src/react-elastic-carousel/components/Pagination/Pagination.js","../src/react-elastic-carousel/components/Carousel.js"],"names":["noop","numberToArray","Array","cssPrefix","classNames","prefix","space","result","chainedClasses","acc","pipe","fns","f","type","props","PREV","NEXT","START","CENTER","END","ItemWrapper","style","className","itemPosition","consts","children","PropTypes","styled","calcLeft","isRTL","verticalMode","isSwiping","swipedSliderPosition","sliderPosition","calcRight","calcTop","calcTransition","transitionMs","easing","tiltEasing","duration","effectiveEasing","transition","left","right","top","outerSpacing","height","ItemWrapperContainer","React","Component","onClick","id","func","Track","childWidth","autoTabIndexVisibleItems","enableSwipe","enableMouseSwipe","preventDefaultTouchmoveEvent","itemsToShow","itemsToScroll","currentItem","itemPadding","onSwiped","onSwiping","onItemClick","width","paddingStyle","minVisibleItem","maxVisibleItem","prevItem","nextItem","originalChildren","isVisible","idx","isPrevItem","isNextItem","itemClass","childToRender","tabIndex","padding","toRender","display","flexDirection","noAutoTabbedItems","directionIcons","up","down","arrowClassname","rotateStyle","rotate","direction","Arrow","icons","rest","arrows","styleObj","cx","NEXT_ITEM","PREV_ITEM","activeIndexReducer","limit","action","optimisticNextItem","state","optimisticPrevItem","nextItemAction","prevItemAction","boxShadow","activeBoxShadow","hoveredBoxShadow","Dot","active","DotContainer","Indicators","Pagination","numOfPages","activePage","pages","rootHeight","childHeight","transitioning","activeIndex","sliderContainerWidth","isComponentMounted","prevProps","enableAutoPlay","breakPoints","getNextItemIndex","currentChildrenLength","Children","prevChildrenLength","toArray","contentRect","removeAutoPlay","setAutoPlay","isOutOfRange","calculatedItemsToShow","entry","entries","window","ro","getDerivedPropsFromBreakPoint","autoPlayIntervalId","clearInterval","addEventListener","removeEventListener","restOfProps","currentBreakPoint","bp","setState","hiddenSlots","totalItems","moveBy","emptySlots","newActiveIndex","nextState","childrenLength","showEmptySlots","newSliderContainerWidth","sliderContainerNode","initialVerticalMode","endLimit","distance","child","item","index","roundedIdx","notEnoughItemsToShow","currentIndex","asElement","asObj","absX","deltaY","absY","dir","data","goingNext","goingBack","horizontalSwipe","verticalSwipe","horizontalMode","distanceSwipe","horizontalEdgeStoppage","verticalEdgeStoppage","trackSize","shouldVerticalSkipUpdate","minSwipeDistanceHorizontal","minSwipeDistanceVertical","swipedLeft","swipedRight","swipedUp","swipedDown","verticalGoSwipe","horizontalGoSwipe","goodToGo","backSlidesToGo","forwardSlideTtoGo","skipTilt","options","tiltMovement","onChange","onNextEnd","nextItemObj","onPrevEnd","childSize","newSliderPosition","nextItemId","safeNextItemId","Math","outOfBoundary","positionEndCb","safeItemsToShow","max","ceil","inRangeItemsToShow","newActivePage","inRangeActivePageIndex","indicatorId","focusOnSelect","pagination","showArrows","disableArrowsOnEnd","renderPagination","canSlideNext","disabledPrevArrow","canSlidePrev","disabledNextArrow","renderArrow","isEdge","onPrevStart","onNextStart","Carousel","initialFirstItem","initialActiveIndex","enableTilt","autoPlaySpeed","onResize","number"],"mappings":"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","sourcesContent":["export const noop = () => {};\n\nexport const numberToArray = n => [...Array(n).keys()];\n\nexport const cssPrefix = (...classNames) => {\n  const prefix = \"rec\";\n  const space = \" \";\n  let result = `${prefix}`; // initial it with global prefix;\n\n  // in case of an array we add the class prefix per item;\n  const chainedClasses = classNames.reduce((acc, current) => {\n    if (current) {\n      acc += `${space}${prefix}-${current}`; // we must keep spaces between class names\n    }\n    return acc;\n  }, \"\");\n  result += chainedClasses;\n\n  return result;\n};\n\nexport const pipe = (...fns) => x => fns.reduce((v, f) => f(v), x);\n\nexport const throttle = (func, limit) => {\n  let lastFunc;\n  let lastRan;\n  return function() {\n    const context = this;\n    const args = arguments;\n    if (!lastRan) {\n      func.apply(context, args);\n      lastRan = Date.now();\n    } else {\n      clearTimeout(lastFunc);\n      lastFunc = setTimeout(function() {\n        if (Date.now() - lastRan >= limit) {\n          func.apply(context, args);\n          lastRan = Date.now();\n        }\n      }, limit - (Date.now() - lastRan));\n    }\n  };\n};\n","import styled from \"styled-components\";\n\nexport default styled.button.attrs(({ type = \"button\" }) => ({ type }))`\n  box-sizing: border-box;\n  transition: all 0.3s ease;\n  font-size: 1.6em;\n  background-color: rgba(103, 58, 183, 0.1);\n  color: ${props => (props.disabled ? \"#999\" : \"#333\")};\n  box-shadow: 0 0 2px 0px #333;\n  border-radius: 50%;\n  border: none;\n  padding: 0;\n  width: 50px;\n  height: 50px;\n  min-width: 50px;\n  line-height: 50px;\n  align-self: center;\n  cursor: pointer;\n  outline: none;\n  &:hover:enabled,\n  &:focus:enabled {\n    color: #fff;\n    background-color: rgba(103, 58, 183, 1);\n    box-shadow: 0 0 2px 0 #333;\n  }\n  &:disabled {\n    cursor: not-allowed;\n  }\n`;\n","export default {\n  PREV: \"PREV\",\n  NEXT: \"NEXT\",\n  START: \"flex-start\",\n  CENTER: \"center\",\n  END: \"flex-end\"\n};\n","import styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\nimport { cssPrefix } from \"../../utils/helpers\";\nimport consts from \"../../consts\";\n\nconst ItemWrapper = styled.div.attrs(({ style }) => ({\n  style,\n  className: cssPrefix(\"item-wrapper\")\n}))`\n  box-sizing: border-box;\n  display: flex;\n  overflow: hidden;\n  user-select: none;\n  justify-content: ${({ itemPosition }) => itemPosition};\n`;\n\nItemWrapper.defaultProps = {\n  style: {},\n  itemPosition: consts.CENTER\n};\n\nItemWrapper.propTypes = {\n  children: PropTypes.element.isRequired,\n  style: PropTypes.object,\n  itemPosition: PropTypes.oneOf([consts.START, consts.CENTER, consts.END])\n};\n\nexport default ItemWrapper;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  overflow: hidden;\n  position: relative;\n  width: 100%;\n  margin: 0 10px;\n`;\n","import styled from \"styled-components\";\n\nconst calcLeft = ({\n  isRTL,\n  verticalMode,\n  isSwiping,\n  swipedSliderPosition,\n  sliderPosition\n}) => {\n  if (verticalMode || isRTL) {\n    return \"auto\";\n  } else {\n    return `${isSwiping ? swipedSliderPosition : sliderPosition}px`;\n  }\n};\n\nconst calcRight = ({\n  isRTL,\n  verticalMode,\n  isSwiping,\n  swipedSliderPosition,\n  sliderPosition\n}) => {\n  if (!verticalMode && isRTL) {\n    return `${isSwiping ? swipedSliderPosition : sliderPosition}px`;\n  } else {\n    return \"auto\";\n  }\n};\n\nconst calcTop = ({\n  verticalMode,\n  isSwiping,\n  swipedSliderPosition,\n  sliderPosition\n}) => {\n  if (!verticalMode) {\n    return \"auto\";\n  } else {\n    return `${isSwiping ? swipedSliderPosition : sliderPosition}px`;\n  }\n};\n\nconst calcTransition = ({ isSwiping, transitionMs, easing, tiltEasing }) => {\n  const duration = isSwiping ? 0 : transitionMs;\n  const effectiveEasing = isSwiping ? tiltEasing : easing;\n  return `all ${duration}ms ${effectiveEasing}`;\n};\n\n// We use attributes (style) to bypass multiple creation of classes (dynamic styling)\nexport default styled.div.attrs(props => ({\n  style: {\n    transition: calcTransition(props),\n    left: calcLeft(props),\n    right: calcRight(props),\n    top: calcTop(props)\n  }\n}))`\n  position: absolute;\n  display: flex;\n  flex-direction: ${({ verticalMode }) => (verticalMode ? \"column\" : \"row\")};\n  ${({ verticalMode }) => (verticalMode ? \"min-height: 100%;\" : \"\")};\n  ${({ verticalMode, outerSpacing }) =>\n    verticalMode ? \"\" : `margin: 0 ${outerSpacing}px;`};\n`;\n","import styled from \"styled-components\";\n\nexport default styled.div.attrs(props => ({\n  style: {\n    height: props.size.height\n  }\n}))`\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n`;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n  direction: ${({ isRTL }) => (isRTL ? \"rtl\" : \"ltr\")};\n`;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { ItemWrapper } from \"./styled\";\nimport { noop } from \"../utils/helpers\";\n\nclass ItemWrapperContainer extends React.Component {\n  onClick = () => {\n    const { onClick, id } = this.props;\n    onClick(id);\n  };\n  render() {\n    return <ItemWrapper {...this.props} onClick={this.onClick} />;\n  }\n}\n\nItemWrapperContainer.defaultProps = {\n  onClick: noop\n};\n\nItemWrapperContainer.propTypes = {\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  onClick: PropTypes.func\n};\n\nexport default ItemWrapperContainer;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Swipeable } from \"react-swipeable\";\nimport { cssPrefix } from \"../utils/helpers\";\nimport ItemWrapperContainer from \"./ItemWrapperContainer\";\n\nconst Track = ({\n  children,\n  childWidth,\n  autoTabIndexVisibleItems,\n  enableSwipe,\n  enableMouseSwipe,\n  preventDefaultTouchmoveEvent,\n  itemsToShow,\n  itemsToScroll,\n  currentItem,\n  itemPosition,\n  itemPadding,\n  onSwiped,\n  onSwiping,\n  verticalMode,\n  onItemClick\n}) => {\n  const width = `${childWidth}px`;\n  const paddingStyle = `${itemPadding.join(\"px \")}px`;\n  const minVisibleItem = currentItem;\n  const maxVisibleItem = currentItem + itemsToShow;\n  const prevItem = minVisibleItem - itemsToScroll;\n  const nextItem = maxVisibleItem + itemsToScroll;\n\n  const originalChildren = React.Children.map(children, (child, idx) => {\n    const isVisible = idx >= minVisibleItem && idx < maxVisibleItem;\n    const isPrevItem = !isVisible && idx >= prevItem && idx < currentItem;\n    const isNextItem = !isVisible && idx < nextItem && idx > currentItem;\n    const itemClass = \"carousel-item\";\n\n    const childToRender = autoTabIndexVisibleItems\n      ? React.cloneElement(child, {\n          tabIndex: isVisible ? 0 : -1\n        })\n      : child;\n    return (\n      <div\n        className={cssPrefix(\n          itemClass,\n          `${itemClass}-${idx}`,\n          `${itemClass}-${isVisible ? \"visible\" : \"hidden\"}`,\n          isPrevItem && `${itemClass}-prev`,\n          isNextItem && `${itemClass}-next`\n        )}\n      >\n        <ItemWrapperContainer\n          id={idx}\n          itemPosition={itemPosition}\n          style={{ width, padding: paddingStyle }}\n          key={idx}\n          onClick={onItemClick}\n        >\n          {childToRender}\n        </ItemWrapperContainer>\n      </div>\n    );\n  });\n  const toRender = enableSwipe ? (\n    <Swipeable\n      style={{\n        display: \"flex\",\n        flexDirection: verticalMode ? \"column\" : \"row\"\n      }}\n      stopPropagation\n      preventDefaultTouchmoveEvent={preventDefaultTouchmoveEvent}\n      trackMouse={enableMouseSwipe}\n      onSwiped={onSwiped}\n      onSwiping={onSwiping}\n      className={cssPrefix(\"swipable\")}\n    >\n      {originalChildren}\n    </Swipeable>\n  ) : (\n    originalChildren\n  );\n  return toRender;\n};\n\nTrack.propTypes = {\n  children: PropTypes.array.isRequired,\n  itemsToShow: PropTypes.number.isRequired,\n  noAutoTabbedItems: PropTypes.bool,\n  currentItem: PropTypes.number.isRequired,\n  itemPosition: PropTypes.string,\n  itemPadding: PropTypes.array,\n  childWidth: PropTypes.number,\n  verticalMode: PropTypes.bool,\n  enableSwipe: PropTypes.bool,\n  enableMouseSwipe: PropTypes.bool,\n  preventDefaultTouchmoveEvent: PropTypes.bool,\n  onSwiped: PropTypes.func,\n  onSwiping: PropTypes.func,\n  onItemClick: PropTypes.func\n};\n\nexport default Track;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport cx from \"classnames\";\nimport { cssPrefix } from \"../utils/helpers\";\nimport { Button } from \"./styled\";\n\nconst directionIcons = {\n  left: \"❮\",\n  right: \"❯\",\n  up: \"❮\",\n  down: \"❯\"\n};\n\nconst arrowClassname = cssPrefix(\"arrow\");\n\nconst rotateStyle = direction => {\n  let rotate = {};\n  if (direction === Arrow.up || direction === Arrow.down) {\n    rotate.transform = \"rotate(90deg)\";\n  }\n  return rotate;\n};\nconst Arrow = ({ direction, onClick, icons, style, ...rest }) => {\n  const arrows = { ...directionIcons, ...icons };\n  const styleObj = {\n    ...rotateStyle(direction),\n    ...style\n  };\n  return (\n    <Button\n      tabIndex={0}\n      onClick={onClick}\n      className={cx(arrowClassname, `${arrowClassname}-${direction}`)}\n      style={styleObj}\n      {...rest}\n    >\n      {arrows[direction]}\n    </Button>\n  );\n};\n\nArrow.left = \"left\";\nArrow.right = \"right\";\nArrow.up = \"up\";\nArrow.down = \"down\";\n\nArrow.propTypes = {\n  direction: PropTypes.oneOf([\"left\", \"right\", \"up\", \"down\"]).isRequired,\n  icons: PropTypes.object,\n  style: PropTypes.object,\n  onClick: PropTypes.func\n};\n\nexport default Arrow;\n","export const NEXT_ITEM = \"NEXT_ITEM\";\nexport const PREV_ITEM = \"PREV_ITEM\";\n","import { NEXT_ITEM, PREV_ITEM } from \"../actions/consts\";\n\nexport const activeIndexReducer = (state, action) => {\n  const { limit, itemsToScroll, type } = action;\n  switch (type) {\n    case NEXT_ITEM: {\n      let optimisticNextItem = state + itemsToScroll;\n      const nextItem = limit >= optimisticNextItem ? optimisticNextItem : limit;\n      return nextItem;\n    }\n\n    case PREV_ITEM: {\n      let optimisticPrevItem = state - itemsToScroll;\n      const prevItem = optimisticPrevItem >= limit ? optimisticPrevItem : limit;\n      return prevItem;\n    }\n\n    default:\n      return state;\n  }\n};\n","import { NEXT_ITEM, PREV_ITEM } from \"./consts\";\n\nexport const nextItemAction = (limit, itemsToScroll) => ({\n  type: NEXT_ITEM,\n  limit,\n  itemsToScroll\n});\n\nexport const prevItemAction = (limit, itemsToScroll) => ({\n  type: PREV_ITEM,\n  limit,\n  itemsToScroll\n});\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport { cssPrefix } from \"../../utils/helpers\";\n\nconst boxShadow = \"0 0 1px 2px rgba(0, 0, 0, 0.5)\";\nconst activeBoxShadow = \"0 0 1px 3px rgba(103,58,183,1)\";\nconst hoveredBoxShadow = \"0 0 1px 3px rgba(103,58,183,.5)\";\n\nconst Dot = styled.button.attrs(({ type = \"button\" }) => ({ type }))`\n  box-sizing: border-box;\n  padding: 0;\n  transition: all 250ms ease;\n  border: none;\n  margin: 5px;\n  background-color: ${({ active }) =>\n    active ? \"rgba(103,58,183,.5)\" : \"transparent\"};\n  font-size: 1.3em;\n  content: \"\";\n  height: 10px;\n  width: 10px;\n  box-shadow: ${({ active }) => (active ? activeBoxShadow : boxShadow)};\n  border-radius: 50%;\n  outline: none;\n  &:hover,\n  &:focus {\n    cursor: pointer;\n    box-shadow: ${({ active }) =>\n      active ? activeBoxShadow : hoveredBoxShadow};\n  }\n`;\n\nclass DotContainer extends React.Component {\n  onClick = () => {\n    const { onClick, id } = this.props;\n    onClick(id);\n  };\n  render() {\n    const { active } = this.props;\n    return (\n      <Dot\n        tabIndex={active ? -1 : 0}\n        onClick={this.onClick}\n        active={active}\n        className={`${cssPrefix(\"dot\")} ${\n          active ? cssPrefix(\"dot_active\") : \"\"\n        }`}\n      />\n    );\n  }\n}\n\nDotContainer.propTypes = {\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  active: PropTypes.bool,\n  onClick: PropTypes.func\n};\n\nexport default DotContainer;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport Dot from \"./Dot\";\nimport { numberToArray, cssPrefix, noop } from \"../../utils/helpers\";\n\nconst Indicators = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin-top: 15px;\n`;\n\nclass Pagination extends React.Component {\n  render() {\n    const { numOfPages, activePage, onClick } = this.props;\n    const pages = numberToArray(numOfPages);\n    return (\n      <Indicators className={cssPrefix(\"pagination\")}>\n        {pages.map((item, i) => (\n          <Dot key={i} id={i} active={i === activePage} onClick={onClick} />\n        ))}\n      </Indicators>\n    );\n  }\n}\n\nPagination.defaultProps = {\n  onClick: noop\n};\n\nPagination.propTypes = {\n  numOfPages: PropTypes.number.isRequired,\n  activePage: PropTypes.number.isRequired,\n  onClick: PropTypes.func\n};\n\nexport default Pagination;\n","import React, { Children } from \"react\";\nimport PropTypes from \"prop-types\";\nimport ResizeObserver from \"resize-observer-polyfill\";\nimport Only from \"react-only-when\";\nimport Track from \"./Track\";\nimport Arrow from \"./Arrow\";\nimport consts from \"../consts\";\nimport { activeIndexReducer } from \"../reducers/items\";\nimport { nextItemAction, prevItemAction } from \"../actions/itemsActions\";\nimport {\n  SliderContainer,\n  Slider,\n  StyledCarousel,\n  CarouselWrapper\n} from \"./styled\";\nimport { pipe, noop, cssPrefix, numberToArray } from \"../utils/helpers\";\nimport { Pagination } from \"./Pagination\";\n\nclass Carousel extends React.Component {\n  isComponentMounted = false;\n  state = {\n    rootHeight: 0,\n    childHeight: 0,\n    sliderPosition: 0,\n    swipedSliderPosition: 0,\n    isSwiping: false,\n    transitioning: false,\n    transitionMs: this.props.transitionMs,\n    activeIndex: this.props.initialActiveIndex || this.props.initialFirstItem, // support deprecated  initialFirstItem\n    pages: [],\n    activePage: 0,\n    sliderContainerWidth: 0\n  };\n\n  componentDidMount() {\n    this.isComponentMounted = true;\n    this.initResizeObserver();\n    this.updateActivePage();\n    this.setPages();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      enableAutoPlay,\n      children,\n      itemsToShow,\n      itemsToScroll,\n      breakPoints\n    } = this.props;\n    const { activeIndex, sliderContainerWidth } = this.state;\n    const nextItem = this.getNextItemIndex(activeIndex, false);\n    const currentChildrenLength = Children.toArray(children).length;\n    const prevChildrenLength = Children.toArray(prevProps.children).length;\n    // update pages (for pagination)\n    if (\n      prevChildrenLength !== currentChildrenLength ||\n      prevProps.itemsToShow !== itemsToShow ||\n      prevProps.itemsToScroll !== itemsToScroll ||\n      prevProps.breakPoints !== breakPoints ||\n      sliderContainerWidth !== prevState.sliderContainerWidth\n    ) {\n      // we mimic a container resize to recalculate item width when itemsToShow are updated\n      this.onContainerResize({ contentRect: { width: sliderContainerWidth } });\n      this.setPages();\n      this.updateActivePage();\n    }\n\n    // autoplay update\n    if (activeIndex === nextItem) {\n      this.removeAutoPlay();\n    } else if (enableAutoPlay && !this.autoPlayIntervalId) {\n      this.setAutoPlay();\n    } else if (!enableAutoPlay && this.autoPlayIntervalId) {\n      this.removeAutoPlay();\n    }\n\n    if (prevChildrenLength !== currentChildrenLength) {\n      const {\n        itemsToShow: calculatedItemsToShow\n      } = this.getDerivedPropsFromBreakPoint();\n      // number of items is reduced (we don't care if number of items is increased)\n      // we need to check if our current index is not out of boundaries\n      // we need to include itemsToShow so we can fill up the slots\n      const lastIndex = currentChildrenLength - 1;\n      const isOutOfRange = activeIndex + calculatedItemsToShow > lastIndex;\n      if (isOutOfRange) {\n        // we are out of boundaries, go \"back\" to last item of the list (respect itemsToShow)\n        this.goTo(Math.max(0, currentChildrenLength - calculatedItemsToShow));\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    this.isComponentMounted = false;\n    this.removeAutoPlay();\n    this.unSubscribeObserver();\n  }\n\n  setRef = name => ref => (this[name] = ref);\n\n  initResizeObserver = () => {\n    this.ro = new ResizeObserver((entries, observer) => {\n      for (const entry of entries) {\n        if (entry.target === this.sliderContainer) {\n          // we are using rAF because it fixes the infinite refresh with gatsby (ssr?).\n          // TBH, I'm not sure i fully understand why.\n          // see https://github.com/sag1v/react-elastic-carousel/issues/107\n          window.requestAnimationFrame(() => {\n            this.onContainerResize(entry);\n          });\n        }\n        if (entry.target === this.slider) {\n          // we are using rAF because it fixes the infinite refresh with gatsby (ssr?).\n          // TBH, I'm not sure i fully understand why\n          // see https://github.com/sag1v/react-elastic-carousel/issues/107\n          window.requestAnimationFrame(() => {\n            this.onSliderResize(entry);\n          });\n        }\n      }\n    });\n\n    this.ro.observe(this.sliderContainer);\n    this.ro.observe(this.slider);\n  };\n\n  unSubscribeObserver = () => this.ro.disconnect();\n\n  setAutoPlay = () => {\n    const { autoPlaySpeed } = this.getDerivedPropsFromBreakPoint();\n    this.autoPlayIntervalId = setInterval(() => {\n      if (this.isComponentMounted) {\n        const { transitioning } = this.state;\n        if (!transitioning) {\n          this.slideNext();\n        }\n      }\n    }, autoPlaySpeed);\n  };\n\n  removeAutoPlay = () => {\n    if (this.autoPlayIntervalId) {\n      clearInterval(this.autoPlayIntervalId);\n      this.autoPlayIntervalId = null;\n    }\n  };\n\n  setPages = () => {\n    const numOfPages = this.getNumOfPages();\n    const pages = numberToArray(numOfPages);\n    this.setState({ pages });\n  };\n\n  onSliderTransitionEnd = fn => {\n    this.slider.addEventListener(\"transitionend\", fn);\n  };\n\n  removeSliderTransitionHook = fn => {\n    this.slider.removeEventListener(\"transitionend\", fn);\n  };\n\n  getDerivedPropsFromBreakPoint = () => {\n    const { breakPoints, ...restOfProps } = this.props;\n    const { sliderContainerWidth } = this.state;\n\n    // default breakpoint from individual props\n    let currentBreakPoint;\n    // if breakpoints were added as props override the individual props\n    if (breakPoints && breakPoints.length > 0) {\n      currentBreakPoint = breakPoints\n        .slice() // no mutations\n        .reverse() // so we can find last match\n        .find(bp => bp.width <= sliderContainerWidth);\n      if (!currentBreakPoint) {\n        /* in case we don't have a lower width than sliderContainerWidth\n         * this mostly happens in initilization when sliderContainerWidth is 0\n         */\n        currentBreakPoint = breakPoints[0];\n      }\n    }\n    // merge direct props with current breakpoint Props\n    return { ...restOfProps, ...currentBreakPoint };\n  };\n\n  updateSliderPosition = () => {\n    this.setState(state => {\n      const {\n        children,\n        verticalMode,\n        itemsToShow,\n        transitionMs\n      } = this.getDerivedPropsFromBreakPoint();\n      const { childHeight, activeIndex } = state;\n\n      const childWidth = this.calculateChildWidth();\n      const totalItems = Children.toArray(children).length;\n      const hiddenSlots = totalItems - itemsToShow;\n      let moveBy = activeIndex * -1;\n      const emptySlots = itemsToShow - (totalItems - activeIndex);\n      if (emptySlots > 0 && hiddenSlots > 0) {\n        moveBy = emptySlots + activeIndex * -1;\n      }\n      let sliderPosition = (verticalMode ? childHeight : childWidth) * moveBy;\n      const newActiveIndex =\n        emptySlots > 0 ? activeIndex - emptySlots : activeIndex;\n      // go back from 0ms to whatever set by the user\n      // We were at 0ms because we wanted to disable animation on resize\n      // see https://github.com/sag1v/react-elastic-carousel/issues/94\n      window.requestAnimationFrame(() => {\n        if (this.isComponentMounted) {\n          this.setState({ transitionMs });\n        }\n      });\n      return {\n        sliderPosition,\n        activeIndex: newActiveIndex < 0 ? 0 : newActiveIndex\n      };\n    });\n  };\n\n  onSliderResize = sliderNode => {\n    if (!this.isComponentMounted) {\n      return;\n    }\n\n    const {\n      verticalMode,\n      children,\n      itemsToShow\n    } = this.getDerivedPropsFromBreakPoint();\n    const { height: sliderHeight } = sliderNode.contentRect;\n    const nextState = {};\n    const childrenLength = Children.toArray(children).length;\n    if (verticalMode) {\n      const childHeight = sliderHeight / childrenLength;\n      // We use Math.min because we don't want to make the child smaller\n      // if the number of children is smaller than itemsToShow.\n      // (Because we do not want \"empty slots\")\n      nextState.rootHeight =\n        childHeight * Math.min(childrenLength, itemsToShow);\n      nextState.childHeight = childHeight;\n    } else {\n      nextState.rootHeight = sliderHeight;\n    }\n    this.setState(nextState);\n  };\n\n  calculateChildWidth = () => {\n    const { sliderContainerWidth } = this.state;\n    const {\n      verticalMode,\n      itemsToShow,\n      showEmptySlots,\n      children\n    } = this.getDerivedPropsFromBreakPoint();\n\n    /* based on slider container's width, get num of items to show\n        * and calculate child's width (and update it in state)\n        */\n    const childrenLength = Children.toArray(children).length || 1;\n\n    let childWidth = 0;\n    if (verticalMode) {\n      childWidth = sliderContainerWidth;\n    } else {\n      // When \"showEmptySlots\" is false\n      // We use Math.min because we don't want to make the child smaller\n      // if the number of children is smaller than itemsToShow.\n      // (Because we do not want \"empty slots\")\n      childWidth =\n        sliderContainerWidth /\n        (showEmptySlots ? itemsToShow : Math.min(childrenLength, itemsToShow));\n    }\n    return childWidth;\n  };\n\n  onContainerResize = sliderContainerNode => {\n    const { width: newSliderContainerWidth } = sliderContainerNode.contentRect;\n    // update slider container width\n    // disable animation on resize see https://github.com/sag1v/react-elastic-carousel/issues/94\n    const {\n      outerSpacing,\n      verticalMode: initialVerticalMode\n    } = this.getDerivedPropsFromBreakPoint();\n    const containerWidth =\n      newSliderContainerWidth - (initialVerticalMode ? 0 : outerSpacing * 2);\n\n    if (\n      !this.isComponentMounted ||\n      this.state.sliderContainerWidth === newSliderContainerWidth\n    ) {\n      // prevent infinite loop\n      return;\n    }\n    this.setState(\n      { sliderContainerWidth: containerWidth, transitionMs: 0 },\n      () => {\n        // we must get these props inside setState (get future props because its async)\n        const {\n          onResize,\n          itemsToShow,\n          children\n        } = this.getDerivedPropsFromBreakPoint();\n\n        const childrenLength = Children.toArray(children).length || 1;\n\n        this.setState(\n          currentState => {\n            // We might need to change the selected index when the size of the container changes\n            // we are making sure the selected index is not out of boundaries and respecting itemsToShow\n            // This usually happens with breakpoints. see https://github.com/sag1v/react-elastic-carousel/issues/122\n            let activeIndex = currentState.activeIndex;\n            // we take the lowest, in case itemsToShow is greater than childrenLength\n            const maxItemsToShow = Math.min(childrenLength, itemsToShow);\n            const endLimit = childrenLength - maxItemsToShow;\n            if (activeIndex > endLimit) {\n              activeIndex = endLimit;\n            }\n\n            return { activeIndex };\n          },\n          () => {\n            /* Based on all of the above new data:\n            * update slider position\n            * get the new current breakpoint\n            * pass the current breakpoint to the consumer's callback\n            */\n            this.updateSliderPosition();\n            const currentBreakPoint = this.getDerivedPropsFromBreakPoint();\n            onResize(currentBreakPoint);\n          }\n        );\n      }\n    );\n  };\n\n  tiltMovement = (position, distance = 20, duration = 150) => {\n    this.setState(state => {\n      return {\n        isSwiping: true,\n        swipedSliderPosition: position - distance\n      };\n    });\n    setTimeout(() => {\n      this.setState({\n        isSwiping: false,\n        swipedSliderPosition: 0\n      });\n    }, duration);\n  };\n\n  convertChildToCbObj = index => {\n    const { children } = this.getDerivedPropsFromBreakPoint();\n    // support decimal itemsToShow\n    const roundedIdx = Math.round(index);\n    const child = Children.toArray(children)[roundedIdx];\n    return { item: child.props, index: roundedIdx };\n  };\n\n  getNextItemIndex = (currentIndex, getPrev) => {\n    const {\n      children,\n      itemsToShow,\n      itemsToScroll\n    } = this.getDerivedPropsFromBreakPoint();\n    const childrenLength = Children.toArray(children).length || 1;\n    const notEnoughItemsToShow = itemsToShow > childrenLength;\n    let limit = getPrev ? 0 : childrenLength - itemsToShow;\n\n    if (notEnoughItemsToShow) {\n      limit = 0; // basically don't move\n    }\n    const nextAction = getPrev\n      ? prevItemAction(0, itemsToScroll)\n      : nextItemAction(limit, itemsToScroll);\n    const nextItem = activeIndexReducer(currentIndex, nextAction);\n    return nextItem;\n  };\n\n  getNextItemObj = getPrev => {\n    const { children } = this.getDerivedPropsFromBreakPoint();\n    const { activeIndex } = this.state;\n    const nextItemIndex = this.getNextItemIndex(activeIndex, getPrev);\n    // support decimal itemsToShow\n    const roundedIdx = Math.round(nextItemIndex);\n    const asElement = Children.toArray(children)[roundedIdx];\n    const asObj = { item: asElement.props, index: roundedIdx };\n    return asObj;\n  };\n\n  resetSwipe = () => {\n    this.setState({\n      swipedSliderPosition: 0,\n      transitioning: false,\n      isSwiping: false\n    });\n  };\n\n  onSwiping = data => {\n    const { deltaX, absX, deltaY, absY, dir } = data;\n\n    this.setState(state => {\n      const { childHeight, activeIndex, sliderPosition } = state;\n      const {\n        itemsToShow,\n        verticalMode,\n        children,\n        isRTL\n      } = this.getDerivedPropsFromBreakPoint();\n\n      const childWidth = this.calculateChildWidth();\n\n      // determine how far can user swipe\n      const childrenLength = Children.toArray(children).length || 1;\n      const goingNext =\n        (!verticalMode && dir === \"Left\" && !isRTL) ||\n        (!verticalMode && dir === \"Right\" && isRTL) ||\n        (verticalMode && dir === \"Up\");\n      const goingBack =\n        (!verticalMode && dir === \"Right\" && !isRTL) ||\n        (!verticalMode && dir === \"Left\" && isRTL) ||\n        (verticalMode && dir === \"Down\");\n\n      const horizontalSwipe = dir === \"Left\" || dir === \"Right\";\n      const verticalSwipe = dir === \"Up\" || dir === \"Down\";\n      const horizontalMode = !verticalMode;\n\n      let distanceSwipe = 0;\n      const horizontalEdgeStoppage = childWidth / 2;\n      const verticalEdgeStoppage = childHeight / 2;\n\n      if (verticalMode) {\n        if (verticalSwipe) {\n          const trackSize = childrenLength * childHeight;\n          if (goingNext) {\n            distanceSwipe =\n              trackSize -\n              childHeight * activeIndex -\n              itemsToShow * childHeight +\n              verticalEdgeStoppage;\n          } else if (goingBack) {\n            distanceSwipe = childHeight * activeIndex + verticalEdgeStoppage;\n          }\n        }\n      } else {\n        if (horizontalSwipe) {\n          const trackSize = childrenLength * childWidth;\n          if (goingNext) {\n            distanceSwipe =\n              trackSize -\n              childWidth * activeIndex -\n              itemsToShow * childWidth +\n              horizontalEdgeStoppage;\n          } else if (goingBack) {\n            distanceSwipe = childWidth * activeIndex + horizontalEdgeStoppage;\n          }\n        }\n      }\n\n      const shouldHorizontalSkipUpdate =\n        (horizontalMode && verticalSwipe) ||\n        (horizontalMode && horizontalSwipe && absX > distanceSwipe);\n\n      const shouldVerticalSkipUpdate =\n        (verticalMode && horizontalSwipe) ||\n        (verticalMode && verticalSwipe && absY > distanceSwipe);\n\n      if (shouldHorizontalSkipUpdate || shouldVerticalSkipUpdate) {\n        // bail out of state update\n        return;\n      }\n      let swipedSliderPosition;\n      if (horizontalSwipe) {\n        if (isRTL) {\n          swipedSliderPosition = sliderPosition + deltaX;\n        } else {\n          swipedSliderPosition = sliderPosition - deltaX;\n        }\n      } else {\n        swipedSliderPosition = sliderPosition - deltaY;\n      }\n      return {\n        swipedSliderPosition,\n        isSwiping: true,\n        transitioning: true\n      };\n    });\n  };\n\n  onSwiped = data => {\n    // we need to handle all scenarios:\n    // 1. Horizontal mode - swipe left or right\n    // 2. Horizontal mode with RTL - swipe left or right\n    // 3. vertical mode - swipe up or down\n\n    const { absX, absY, dir } = data;\n    const { childHeight, activeIndex } = this.state;\n    const {\n      verticalMode,\n      isRTL,\n      itemsToScroll\n    } = this.getDerivedPropsFromBreakPoint();\n    const childWidth = this.calculateChildWidth();\n\n    let func = this.resetSwipe;\n    const minSwipeDistanceHorizontal = childWidth / 5;\n    const minSwipeDistanceVertical = childHeight / 5;\n    const swipedLeft = dir === \"Left\";\n    const swipedRight = dir === \"Right\";\n    const swipedUp = dir === \"Up\";\n    const swipedDown = dir === \"Down\";\n    const verticalGoSwipe =\n      verticalMode &&\n      (swipedUp || swipedDown) &&\n      absY > minSwipeDistanceVertical;\n\n    const horizontalGoSwipe =\n      !verticalMode &&\n      (swipedRight || swipedLeft) &&\n      absX > minSwipeDistanceHorizontal;\n\n    let goodToGo = false;\n    if (verticalGoSwipe || horizontalGoSwipe) {\n      goodToGo = true;\n    }\n\n    if (goodToGo) {\n      // we should go to a different item\n      // determine what method we need to invoke\n\n      if (verticalMode) {\n        // get number of slides from user's swiping\n        const numberOfSlidesViaSwipe = Math.ceil(\n          (absY - minSwipeDistanceVertical) / childHeight\n        );\n        // if user swipes more than itemsToScroll then we want to bypass itemsToScroll for a smoother scroll\n        const numberOfSlidesTogo = Math.max(\n          itemsToScroll,\n          numberOfSlidesViaSwipe\n        );\n\n        const backSlidesToGo = activeIndex - numberOfSlidesTogo;\n        const forwardSlideTtoGo = activeIndex + numberOfSlidesTogo;\n\n        // up or down\n        if (swipedDown) {\n          // func = this.onPrevStart;\n          func = () => this.goTo(backSlidesToGo);\n        }\n        if (swipedUp) {\n          // func = this.onNextStart;\n          func = () => this.goTo(forwardSlideTtoGo);\n        }\n      } else {\n        // get number of slides from user's swiping\n        const numberOfSlidesViaSwipe = Math.ceil(\n          (absX - minSwipeDistanceHorizontal) / childWidth\n        );\n        // if user swipes more than itemsToScroll then we want to bypass itemsToScroll for a smoother scroll\n        const numberOfSlidesTogo = Math.max(\n          itemsToScroll,\n          numberOfSlidesViaSwipe\n        );\n\n        const backSlidesToGo = activeIndex - numberOfSlidesTogo;\n        const forwardSlideTtoGo = activeIndex + numberOfSlidesTogo;\n\n        // horizontal mode\n        if (isRTL) {\n          // flip sides\n          if (swipedLeft) {\n            // func = this.onPrevStart;\n            func = () => this.goTo(backSlidesToGo);\n          }\n          if (swipedRight) {\n            // func = this.onNextStart;\n            func = () => this.goTo(forwardSlideTtoGo);\n          }\n        } else {\n          // normal behavior\n          if (swipedLeft) {\n            // func = this.onNextStart;\n            func = () => this.goTo(forwardSlideTtoGo);\n          }\n          if (swipedRight) {\n            // func = this.onPrevStart;\n            func = () => this.goTo(backSlidesToGo);\n          }\n        }\n      }\n    }\n    // we are not \"tilting\" on edges, so we need to reset isSwiping and transitioning.\n    // otherwise we wont slide back to edge\n    this.setState({ isSwiping: false, transitioning: false });\n    func({ skipTilt: true });\n  };\n\n  onNextStart = options => {\n    const { onNextStart } = this.getDerivedPropsFromBreakPoint();\n    const { activeIndex } = this.state;\n    const nextItemObj = this.getNextItemObj();\n    const prevItemObj = this.convertChildToCbObj(activeIndex);\n    onNextStart(prevItemObj, nextItemObj);\n    this.slideNext(options);\n  };\n\n  onPrevStart = options => {\n    const { onPrevStart } = this.getDerivedPropsFromBreakPoint();\n    const { activeIndex } = this.state;\n    const nextItemObj = this.getNextItemObj(true);\n    const prevItemObj = this.convertChildToCbObj(activeIndex);\n    onPrevStart(prevItemObj, nextItemObj);\n    this.slidePrev(options);\n  };\n\n  slideNext = (options = {}) => {\n    const { skipTilt } = options;\n    const { enableTilt } = this.getDerivedPropsFromBreakPoint();\n    const { activeIndex, sliderPosition } = this.state;\n    const nextItem = this.getNextItemIndex(activeIndex, false);\n    if (activeIndex !== nextItem) {\n      this.goTo(nextItem);\n    } else if (enableTilt && !skipTilt) {\n      this.tiltMovement(sliderPosition, 20, 150);\n    }\n  };\n\n  slidePrev = (options = {}) => {\n    const { skipTilt } = options;\n    const { activeIndex } = this.state;\n    const { enableTilt } = this.getDerivedPropsFromBreakPoint();\n    const prevItem = this.getNextItemIndex(activeIndex, true);\n    if (activeIndex !== prevItem) {\n      this.goTo(prevItem);\n    } else if (enableTilt && !skipTilt) {\n      this.tiltMovement(0, -20, 150);\n    }\n  };\n\n  onNextEnd = () => {\n    const { onNextEnd, onChange } = this.getDerivedPropsFromBreakPoint();\n    const { activeIndex, activePage } = this.state;\n    const nextItemObj = this.convertChildToCbObj(activeIndex);\n    this.removeSliderTransitionHook(this.onNextEnd);\n    this.setState({ transitioning: false });\n    onChange && onChange(nextItemObj, activePage);\n    onNextEnd(nextItemObj, activePage);\n  };\n\n  onPrevEnd = () => {\n    const { onPrevEnd, onChange } = this.getDerivedPropsFromBreakPoint();\n    const { activeIndex, activePage } = this.state;\n    const nextItemObj = this.convertChildToCbObj(activeIndex);\n    this.removeSliderTransitionHook(this.onPrevEnd);\n    this.setState({ transitioning: false });\n    onChange && onChange(nextItemObj, activePage);\n    onPrevEnd(nextItemObj, activePage);\n  };\n\n  generatePositionUpdater = (\n    direction,\n    nextItemId,\n    verticalMode,\n    rest\n  ) => state => {\n    const { sliderPosition, childHeight, activeIndex } = state;\n    const childWidth = this.calculateChildWidth();\n\n    let newSliderPosition = 0;\n    const childSize = verticalMode ? childHeight : childWidth;\n    if (direction === consts.NEXT) {\n      newSliderPosition =\n        sliderPosition - childSize * (nextItemId - activeIndex);\n    } else {\n      newSliderPosition =\n        sliderPosition + childSize * (activeIndex - nextItemId);\n    }\n\n    return {\n      sliderPosition: newSliderPosition,\n      activeIndex: nextItemId,\n      swipedSliderPosition: 0,\n      isSwiping: false,\n      ...rest\n    };\n  };\n\n  goTo = nextItemId => {\n    const {\n      children,\n      verticalMode,\n      itemsToShow\n    } = this.getDerivedPropsFromBreakPoint();\n    const { activeIndex } = this.state;\n    const childrenLength = Children.toArray(children).length;\n    let safeNextItemId = Math.max(0, nextItemId); // don't allow negative numbers\n    const isPrev = activeIndex > safeNextItemId;\n    const nextAvailableItem = this.getNextItemIndex(activeIndex, isPrev);\n    const noChange = nextAvailableItem === activeIndex;\n    const outOfBoundary = safeNextItemId + itemsToShow >= childrenLength;\n    if (noChange) {\n      return;\n    }\n    if (outOfBoundary) {\n      // Either go to last index (respect itemsToShow) or 0 index if we can't fill the slider\n      safeNextItemId = Math.max(0, childrenLength - itemsToShow);\n    }\n    let direction = consts.NEXT;\n    let positionEndCb = this.onNextEnd;\n    if (isPrev) {\n      direction = consts.PREV;\n      positionEndCb = this.onPrevEnd;\n    }\n    const stateUpdater = this.generatePositionUpdater(\n      direction,\n      safeNextItemId,\n      verticalMode,\n      {\n        transitioning: true\n      }\n    );\n    this.setState(stateUpdater, () => {\n      // callback\n      pipe(\n        this.updateActivePage(),\n        this.onSliderTransitionEnd(positionEndCb)\n      );\n    });\n  };\n\n  getNumOfPages = () => {\n    const { children, itemsToShow } = this.getDerivedPropsFromBreakPoint();\n    const childrenLength = Children.toArray(children).length;\n    const safeItemsToShow = Math.max(itemsToShow, 1);\n    const numOfPages = Math.ceil(childrenLength / safeItemsToShow);\n    return numOfPages || 1;\n  };\n\n  updateActivePage = () => {\n    this.setState(state => {\n      const { itemsToShow, children } = this.getDerivedPropsFromBreakPoint();\n      const { activeIndex, activePage } = state;\n      const numOfPages = this.getNumOfPages();\n      const childrenLength = Children.toArray(children).length;\n      const inRangeItemsToShow = Math.min(childrenLength, itemsToShow);\n      // watch out from 0 (so we wont divide by zero)\n      const safeItemsToShow = Math.max(inRangeItemsToShow, 1);\n      const newActivePage = Math.ceil(activeIndex / safeItemsToShow);\n      const inRangeActivePageIndex = Math.min(numOfPages - 1, newActivePage);\n      if (activePage !== inRangeActivePageIndex) {\n        return { activePage: inRangeActivePageIndex };\n      }\n    });\n  };\n\n  onIndicatorClick = indicatorId => {\n    const { itemsToShow } = this.getDerivedPropsFromBreakPoint();\n    const gotoIndex = indicatorId * itemsToShow;\n    this.setState({ activePage: indicatorId });\n    this.goTo(gotoIndex);\n  };\n\n  render() {\n    const {\n      activePage,\n      isSwiping,\n      sliderPosition,\n      swipedSliderPosition,\n      rootHeight,\n      pages,\n      activeIndex,\n      transitionMs\n    } = this.state;\n    const {\n      className,\n      style,\n      itemsToShow,\n      itemsToScroll,\n      verticalMode,\n      isRTL,\n      easing,\n      tiltEasing,\n      children,\n      focusOnSelect,\n      autoTabIndexVisibleItems,\n      itemPosition,\n      itemPadding,\n      outerSpacing,\n      enableSwipe,\n      enableMouseSwipe,\n      pagination,\n      showArrows,\n      disableArrowsOnEnd,\n      preventDefaultTouchmoveEvent,\n      renderArrow,\n      renderPagination\n    } = this.getDerivedPropsFromBreakPoint();\n\n    const childWidth = this.calculateChildWidth();\n\n    const numOfPages = this.getNumOfPages();\n\n    /** Determine if arrows should be disabled */\n    const canSlidePrev =\n      activeIndex !== this.getNextItemIndex(activeIndex, true);\n    const canSlideNext =\n      activeIndex !== this.getNextItemIndex(activeIndex, false);\n    const disabledPrevArrow = !canSlidePrev && disableArrowsOnEnd;\n    const disabledNextArrow = !canSlideNext && disableArrowsOnEnd;\n\n    return (\n      <CarouselWrapper\n        isRTL={isRTL}\n        className={`${cssPrefix(\"carousel-wrapper\")} ${className}`}\n        style={style}\n      >\n        <StyledCarousel\n          className={cssPrefix(\"carousel\")}\n          size={{ height: rootHeight }}\n        >\n          <Only when={showArrows}>\n            {renderArrow ? (\n              renderArrow({\n                type: consts.PREV,\n                onClick: this.onPrevStart,\n                isEdge: !canSlidePrev\n              })\n            ) : (\n              <Arrow\n                onClick={this.onPrevStart}\n                direction={verticalMode ? Arrow.up : Arrow.left}\n                disabled={disabledPrevArrow}\n              />\n            )}\n          </Only>\n          <SliderContainer\n            className={cssPrefix(\"slider-container\")}\n            ref={this.setRef(\"sliderContainer\")}\n          >\n            <Slider\n              verticalMode={verticalMode}\n              isRTL={isRTL}\n              easing={easing}\n              sliderPosition={sliderPosition}\n              swipedSliderPosition={swipedSliderPosition}\n              isSwiping={isSwiping}\n              transitionMs={transitionMs}\n              tiltEasing={tiltEasing}\n              className={cssPrefix(\"slider\")}\n              ref={this.setRef(\"slider\")}\n              outerSpacing={outerSpacing}\n            >\n              <Track\n                verticalMode={verticalMode}\n                children={Children.toArray(children)}\n                childWidth={childWidth}\n                currentItem={activeIndex}\n                autoTabIndexVisibleItems={autoTabIndexVisibleItems}\n                itemsToShow={itemsToShow}\n                itemsToScroll={itemsToScroll}\n                itemPosition={itemPosition}\n                itemPadding={itemPadding}\n                enableSwipe={enableSwipe}\n                enableMouseSwipe={enableMouseSwipe}\n                preventDefaultTouchmoveEvent={preventDefaultTouchmoveEvent}\n                onSwiped={this.onSwiped}\n                onSwiping={this.onSwiping}\n                onItemClick={focusOnSelect ? this.goTo : undefined}\n              />\n            </Slider>\n          </SliderContainer>\n          <Only when={showArrows}>\n            {renderArrow ? (\n              renderArrow({\n                type: consts.NEXT,\n                onClick: this.onNextStart,\n                isEdge: !canSlideNext\n              })\n            ) : (\n              <Arrow\n                onClick={this.onNextStart}\n                direction={verticalMode ? Arrow.down : Arrow.right}\n                disabled={disabledNextArrow}\n              />\n            )}\n          </Only>\n        </StyledCarousel>\n        <Only when={pagination}>\n          {renderPagination ? (\n            renderPagination({\n              pages: pages,\n              activePage,\n              onClick: this.onIndicatorClick\n            })\n          ) : (\n            <Pagination\n              numOfPages={numOfPages}\n              activePage={activePage}\n              onClick={this.onIndicatorClick}\n            />\n          )}\n        </Only>\n      </CarouselWrapper>\n    );\n  }\n}\n\nCarousel.defaultProps = {\n  className: \"\",\n  style: {},\n  verticalMode: false,\n  isRTL: false,\n  initialFirstItem: 0,\n  initialActiveIndex: 0,\n  showArrows: true,\n  showEmptySlots: false,\n  disableArrowsOnEnd: true,\n  pagination: true,\n  easing: \"ease\",\n  tiltEasing: \"ease\",\n  transitionMs: 500,\n  enableTilt: true,\n  enableSwipe: true,\n  enableMouseSwipe: true,\n  preventDefaultTouchmoveEvent: false,\n  focusOnSelect: false,\n  autoTabIndexVisibleItems: true,\n  itemsToShow: 1,\n  itemsToScroll: 1,\n  itemPosition: consts.CENTER,\n  itemPadding: [0, 0, 0, 0],\n  outerSpacing: 0,\n  enableAutoPlay: false,\n  autoPlaySpeed: 2000,\n\n  // callbacks\n  onChange: noop,\n  onNextEnd: noop,\n  onPrevEnd: noop,\n  onNextStart: noop,\n  onPrevStart: noop,\n  onResize: noop\n};\n\nCarousel.propTypes = {\n  /** Items to render */\n  children: PropTypes.node.isRequired,\n\n  /** The css class for the root element */\n  className: PropTypes.string,\n\n  /** The style object for the root element */\n  style: PropTypes.object,\n\n  /** Display the Carousel in a vertical layout */\n  verticalMode: PropTypes.bool,\n\n  /** Flip right to left */\n  isRTL: PropTypes.bool,\n\n  /** Show dots for paging */\n  pagination: PropTypes.bool,\n\n  /** Animation speed */\n  transitionMs: PropTypes.number,\n\n  /** transition easing pattern */\n  easing: PropTypes.string,\n\n  /** transition easing pattern for the tilt */\n  tiltEasing: PropTypes.string,\n\n  /** The \"bump\" animation when reaching the last item */\n  enableTilt: PropTypes.bool,\n\n  /** Number of visible items  */\n  itemsToShow: PropTypes.number,\n\n  /** Number of items to scroll */\n  itemsToScroll: PropTypes.number,\n\n  /** Collection of objects with a width, itemsToShow and itemsToScroll  */\n  breakPoints: PropTypes.arrayOf(\n    PropTypes.shape({\n      width: PropTypes.number.isRequired,\n      itemsToShow: PropTypes.number,\n      itemsToScroll: PropTypes.number\n    })\n  ),\n\n  /** The initial active index when the component mounts */\n  initialActiveIndex: PropTypes.number,\n\n  /** **DEPRECATED - use initialActiveIndex instead** The first items when the component mounts */\n  initialFirstItem: PropTypes.number,\n\n  /** Show the arrow buttons */\n  showArrows: PropTypes.bool,\n\n  /** Show empty slots when children.length < itemsToShow (not compatible with verticalMode yet !) */\n  showEmptySlots: PropTypes.bool,\n\n  /** Disables the arrow button when there are no more items */\n  disableArrowsOnEnd: PropTypes.bool,\n\n  /** Go to item on click */\n  focusOnSelect: PropTypes.bool,\n\n  /** Automatically inject `tabIndex:0` to visible items */\n  autoTabIndexVisibleItems: PropTypes.bool,\n\n  /** A render prop for the arrow component\n   * - ({type, onClick}) => <div onClick={onClick}>{type === 'prev' ? '<-' : '->'}</div>\n   */\n  renderArrow: PropTypes.func,\n\n  /** A render prop for the pagination component\n   * - ({ pages, activePage, onClick }) =>  <YourComponent/>\n   */\n  renderPagination: PropTypes.func,\n\n  /** Position the element relative to it's wrapper (use the consts object) - consts.START | consts.CENTER | consts.END */\n  itemPosition: PropTypes.oneOf([consts.START, consts.CENTER, consts.END]),\n\n  /** A padding for each element  */\n  itemPadding: PropTypes.array,\n\n  /** A margin at the beginning and at the end of the carousel (not compatible with verticalMode yet !) */\n  outerSpacing: PropTypes.number,\n\n  // swipe\n  /** Enable or disable swipe */\n  enableSwipe: PropTypes.bool,\n\n  /** Enable or disable mouse swipe */\n  enableMouseSwipe: PropTypes.bool,\n\n  /** Prevent page scroll on touchmove.\n   * Use this to stop the browser from scrolling while a user swipes.\n   * More details: https://github.com/FormidableLabs/react-swipeable#preventdefaulttouchmoveevent-details\n   */\n  preventDefaultTouchmoveEvent: PropTypes.bool,\n\n  // auto play\n  /** Enable or disable auto play */\n  enableAutoPlay: PropTypes.bool,\n\n  /** Set auto play speed (ms) */\n  autoPlaySpeed: PropTypes.number,\n\n  // callbacks\n  /** A callback for the change of an item\n   * - onChange(currentItemObject, currentPageIndex) => {} */\n  onChange: PropTypes.func,\n\n  /** A callback for the beginning of the next transition\n   * - onNextStart(prevItemObject, nextItemObject) => {} */\n  onNextStart: PropTypes.func,\n\n  /** A callback for the beginning of the prev transition\n   * - onPrevStart(prevItemObject, nextItemObject) => {} */\n  onPrevStart: PropTypes.func,\n\n  /** A callback for the end of the next transition\n   * - onNextEnd(nextItemObject, currentPageIndex) => {} */\n  onNextEnd: PropTypes.func,\n\n  /** A callback for the end of the prev transition\n   * - onPrevEnd(nextItemObject, currentPageIndex) => {} */\n  onPrevEnd: PropTypes.func,\n\n  /** A callback for the \"slider-container\" resize\n   * - onResize(currentBreakPoint) => {} */\n  onResize: PropTypes.func\n};\n\nexport default Carousel;\n"]},"metadata":{},"sourceType":"module"}